<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!ENTITY % FDP-ENTITIES SYSTEM "fdp-entities.ent">
%FDP-ENTITIES;

]>
<!-- $Id: -->

<chapter id="ch-using-rpm-db">
  <title>Using the RPM Database</title>
  <para>
    This chapter covers:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Querying the RPM database
      </para>
    </listitem>
    <listitem>
      <para>
        Getting information on RPM files
      </para>
    </listitem>
    <listitem>
      <para>
        Finding out which packages own files on your system
      </para>
    </listitem>
    <listitem>
      <para>
        Verifying installed packages
      </para>
    </listitem>
    <listitem>
      <para>
        Backing up the RPM database
      </para>
    </listitem>
    <listitem>
      <para>
        Repairing damaged RPM databases
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Every package you install with RPM is recorded in the RPM database.
    The RPM system includes commands to query this database to find out
    which packages are installed and to provide quite a few details
    about these packages.
  </para>
  <para>
    This chapter covers querying both the RPM database and RPM package
    files. Both types of query are important:
  </para>
  <itemizedlist>
	<listitem><para>Query the RPM database to see what is installed, or not installed,
    on your system.</para></listitem>
	<listitem><para>Query package files to see what the files require, as well as what
    the files provide.</para></listitem>
  </itemizedlist>
  <para>
    In addition to querying the RPM database, you can use the database
    to verify packages. Since this database is so important to the
    management of your Linux system, this chapter covers how to back it
    up, as well as how to repair a damaged RPM database.
  </para>
  <section id="RPM_Guide-Using_RPM_DB-querying_database">
    <title>Querying the RPM Database</title>
    <para>
      In <xref linkend="ch-using-rpm"/> , you saw that the rpm command usually takes one major
      command-line option to tell it the operation to perform and a
      myriad of command-line options to customize the operation. The rpm
      command may also take the name of one or more RPM package files or
      the name of one or more installed packages. For example, the <command>rpm
      –i</command> command performs an installation operation, and the <command>rpm –U</command>
      command performs an upgrade.
    </para>
    <para>
      For querying the RPM database, the major command-line option is
      <literal>–q</literal>, short for query. This option tells the rpm command to query
      the RPM database. You can also use the long option <literal>--query</literal>.
    </para>
    <para>
      In the last few chapters, you've used the <literal>–q</literal> option with the rpm
      command to query just for the presence or absence of installed
      packages. You can expand the <literal>-q</literal> option to perform a wide array of
      queries to find out information about the packages installed on a
      Linux system.
    </para>
    <section>
      <title>Querying packages</title>
      <para>
        The basic format of the <command>rpm –q</command> command follows:
      </para>
      <para>
        <command>rpm –q <replaceable>package_name</replaceable></command>
      </para>
      <para>
        You need to provide the name of a package to query. For example:
      </para>
      <para>
        <command>rpm -q telnet-0.17</command>
      </para>
      <para>
        This command returns the name of the package, if installed. For
        example:
      </para>
      <screen>
        telnet-0.17-20
      </screen>
      <para>
        If the package is not installed, you’ll see a message like the
        following:
      </para>
      <screen>
        package telnet-0.17 is not installed
      </screen>
      <para>
        You can provide the whole package name to the rpm command, which
        includes the name, the version, and the RPM package number, as
        discussed in <xref linkend="ch-rpm-overview"/> . You can also just provide the name and
        version number, as shown previously, or just the base name of
        the package.
      </para>
      <para>
        For example, the following command uses just the base name of
        the package:
      </para>
      <para>
        <command>rpm -q telnet</command>
      </para>
      <screen>
        telnet-0.17-20
      </screen>
      <important>
        <para>
          The rpm –q command expects a package name. Although it
          supports some amount of customized queries, you really need to
          know which packages you want the rpm command to report on.
        </para>
      </important>
      <para>
        You can provide more than one package name; the rpm command
        reports on each package, as shown following.
      </para>
      <para>
        <command>rpm -q telnet telnet-server</command>
      </para>
      <screen>
        telnet-0.17-20
        telnet-server-0.17-20
      </screen>
      <para>
        You need to change the way you query if you want to perform
        searches when you do not know the full package name in advance.
        The following sections cover options for creating various
        queries.
      </para>
    </section>

    <section id="RPM_Guide-Using_RPM_DB-query_everything">
      <title>Querying everything</title>
      <para>
        Up to now, we have used the rpm command to query only for
        specific packages. The <literal>–a</literal> option tells the rpm command to
        query for all packages. You can also use the longer option,
        <literal>--all</literal>, in place of <literal>–a</literal>.
      </para>
      <para>
        For example:
      </para>
      <para>
        <command>rpm -qa</command>
      </para>
      <para>
        This command returns every package installed on your system,
        quite a few packages. The packages are returned one per line, as
        shown following.
      </para>
      <para>
<screen>m17n-db-gujarati-1.5.5-4.fc13.noarch
libvisual-0.4.0-9.fc12.x86_64
hal-filesystem-0.5.14-3.fc13.x86_64
fedora-logos-13.0.2-1.fc13.noarch
kdepim-runtime-libs-4.4.5-1.fc13.x86_64
lpsolve-5.5.0.15-3.fc13.x86_64
kipi-plugins-1.2.0-1.fc13.x86_64
kbd-1.15-9.fc12.x86_64
perl-Glib-1.201-4.fc12.x86_64
kdeplasma-addons-4.4.5-1.fc13.x86_64
</screen>
      </para>
      <para>
        This output has been modified to meet size constraints. Try the
        <command>rpm –qa</command> command to see the full output for your system.
      </para>
      <para>
        There may be over a thousand packages on your system. Even so,
        the <command>rpm –qa</command> command executes surprisingly fast.
      </para>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-refining_query">
      <title>Refining the query</title>
      <para>
        When you query all the installed packages, you get too much
        output for most purposes, other than to get a general idea of
        the magnitude of packages installed on your system. But if you
        cannot remember a package name, there's no real option, other
        than writing your own RPM query program.
      </para>
      <para>
        You can take advantage of the power of the Linux shells, though,
        and the wonderful ability to pipe the output of one command into
        another to work around this problem. With the large amount of
        output, you may want to pipe the output to the <command>more</command>
	or <command>less</command> programs, and display the output one page at a time.
      </para>
      <para>
        Even with <command>more</command> and <command>less</command>, the 
	<command>rpm –qa</command> command outputs too much
        information to be really useful, unless you can somehow filter
        the information automatically.
      </para>
      <section id="RPM_Guide-Using_RPM_DB-refining-grep">
        <title>Piping the Output To grep</title>
        <para>
          The Linux (and Unix) <command>grep</command> command provides a powerful tool for
          filtering through textual data. If you pipe the output of the
	  <command>rpm –qa</command> command into the <command>grep</command> command, you have a
          powerful search engine at your fingertips.
        </para>
        <para>
          For example, if you know that most packages that provide tools for the SSH service have 
	  "ssh" in their names, you can find all these packages by using a command like the following:
        </para>
        <para>
          <command>rpm -qa | grep ssh</command>
        </para>
        <para>
          This command outputs packages such as the following:
        </para>
        <screen>ksshaskpass-0.5.3-1.fc13.x86_64
openssh-server-5.4p1-3.fc13.x86_64
libssh2-1.2.4-1.fc13.i686
openssh-askpass-5.4p1-3.fc13.x86_64
libssh2-1.2.4-1.fc13.x86_64
openssh-5.4p1-3.fc13.x86_64
openssh-clients-5.4p1-3.fc13.x86_64
libssh-0.4.4-1.fc13.x86_64</screen>
        <para>
          You can also use the --pipe option to the rpm command,
          introduced in <xref linkend="ch-using-rpm"/> . With this option, your command
          becomes:
        </para>
        <para>
          <command>rpm -qa --pipe "grep ssh"</command>
        </para>
        <note>
        <para>
          <xref linkend="ch-rpm-programming-python"/>  covers programming with the RPM system with the
          Python scripting language.
        </para>
	</note>
        <para>
          You can take advantage of some of the options that the grep
          command supports, including -i for ignoring the case of the
          string to match, --regexp to pass a regular expression to
          grep, and -v, to output only those entries that do not match
          the search string.
        </para>
        <note>
          <para>If you are unfamiliar with grep, the online manual pages for
          the grep command provide a listing of the command-line options
          available for grep as well as a short tutorial on regular
          expressions supported by grep.</para>
	</note>
  
        <para>
          Table 5-1 lists some of the common package-naming conventions.
          Remember that these are just conventions, not hard-and-fast
          rules. You can use these conventions in concert with rpm
          queries.
        </para>
        <para>
          Table 5-1 Common Naming Conventions on Linux
        </para>
        <informaltable frame="all">
          <tgroup cols="2">
            <tbody>
              <row>
                <entry>
                  <para>
                    Convention
                  </para>
                </entry>
                <entry>
                  <para>
                    Usually indicates
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Starts with g
                  </para>
                </entry>
                <entry>
                  <para>
                    GNOME desktop application or a GNU application,
                    especially GNU C programming tools and libraries
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Starts with j
                  </para>
                </entry>
                <entry>
                  <para>
                    Cross-platform Java application
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Starts with k
                  </para>
                </entry>
                <entry>
                  <para>
                    KDE desktop application, Linux kernel package, or
                    Kerberos security package
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Starts with py
                  </para>
                </entry>
                <entry>
                  <para>
                    Python application
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Starts with rh
                  </para>
                </entry>
                <entry>
                  <para>
                    Red Hat application, usually for configuring your
                    system
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Starts with tk
                  </para>
                </entry>
                <entry>
                  <para>
                    Graphical Tcl application
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Starts with x
                  </para>
                </entry>
                <entry>
                  <para>
                    X Window System graphical desktop application
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Ends with wm
                  </para>
                </entry>
                <entry>
                  <para>
                    Window manager for controlling the layout of windows
                    on the screen
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="RPM_Guide-Using_RPM_DB-refining-wildcards">
        <title>Querying with Wildcards</title>
        <para>
          In addition to using other Linux commands, the rpm command
          supports some search options. You can pass a wildcard to <command>rpm –qa</command>
	 (but not just <command>rpm –q</command>, you need the <literal>–a</literal> to look for
          all packages). For example:
        </para>
        <para>
          <command>rpm -qa "kernel*"</command>
        </para>
        <screen>kernel-2.6.33.6-147.fc13.x86_64
kernel-2.6.33.5-112.fc13.x86_64
kernel-devel-2.6.33.5-112.fc13.x86_64
kernel-headers-2.6.33.6-147.fc13.x86_64
kernel-2.6.33.5-124.fc13.x86_64
kernel-devel-2.6.33.5-124.fc13.x86_64
kernel-devel-2.6.33.6-147.fc13.x86_64</screen>
        <important>
        <para>The quotation marks around "kernel*" are to prevent the Linux
          shell from expanding the wildcard character, *, to try to
          match a list of file names in the local directory. By passing
          the command-line parameter as "kernel*", the rpm program gets to
          see the * character. Otherwise, the shell expands the
          parameter and the program, rpm in this case, never sees the *.</para>
	</important>
        <para>
          This command searches for all package names starting with
          send. You can reverse this with an exclamation mark. For
          example:
        </para>
        <para>
          $ rpm -qa '!send*'
        </para>
        <para>
          This command works sort of like <command>grep –v</command> and 
	  searches for all packages that do not start with "send".
        </para>
        <para>
          There are quite a few other Linux commands you can use in
          pipelines with the <command>rpm –qa</command> command to 
	  better filter and display the data, such as <command>wc –l</command>
	  to count the number of
          packages that you query. You can also use a number of other
          query options to find out more specialized information from
          the RPM database.
        </para>
      </section>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-which_package">
      <title>Finding which packages own files</title>
      <para>
        One of the common problems with package management comes when
        you want to track a given file on your system back to the
        package that “owns” the file (that is, the package that,
        when installed, installed the particular file).
      </para>
      <para>
        The <option>-qf</option> option tells the rpm command to query for all packages
        that own a particular file. You can also use the longer option,
        <option>--file</option>, in place of <option>–f</option>. 
	The basic syntax follows:
      </para>
      <para>
        <command>rpm -qf <replaceable>filename</replaceable></command>
      </para>
      <para>
        For example, the grep command used in previous examples is
        really a file. (Just about all Linux commands are a file of some
        sort, be it a shell script or an executable application.) You
        can use a few Linux commands to determine which package provides
        this handy program.
      </para>
      <para>
        First, we need the exact path to the file. For Linux commands,
        you can use the <command>which</command> command, if the program
	is in your path. (The grep program must be in your path, or 
	commands with grep will fail.)
      </para>
      <para>
        Try the following command:
      </para>
      <para>
        <command>which grep</command>
      </para>
      <para>
        This command returns the path to grep:
      </para>
      <para>
        <screen>/bin/grep</screen>
      </para>
      <para>
        We can now check which package owns this file with the following
        command:
      </para>
      <para>
        <command>rpm -qf /bin/grep</command>
      </para>
      <para>
        <screen>grep-2.6.3-1</screen>
      </para>
      <para>
        You can also use the Linux back-tick operator to perform this
        check with one command.
      </para>
      <para>
        <command>rpm -qf `which grep`</command>
      </para>
      <para>
        <screen>grep-2.6.3-1</screen>
      </para>
      <para>
        If you use the bash shell, you can use the $(command parameters)
        syntax in place of the back tick, or `, characters. For example:
      </para>
      <para>
        <command>rpm -qf $(which grep)</command>
      </para>
      <para>
        <screen>grep-2.6.3-1</screen>
      </para>
      <para>
        If no package owns a given file, you’ll see output like the
        following:
      </para>
      <para>
        <command>rpm -qf mail</command>
      </para>
      <para>
        <screen>file mail is not owned by any package</screen>
      </para>
      <para>
        Often, the package that owns a file does not have an intuitive
        name. The ssh command, for example, is owned by the
        openssh-clients package, as shown following:
      </para>
      <para>
	<command>rpm -qf `which ssh`</command>
      </para>
      <para>
        <screen>openssh-clients-5.4p1-3</screen>
      </para>
      <para>
        As you can see, the name of a command does not always correspond
        directly to the name of the package that provides that command.
        This is where the <command>rpm –qf</command> command proves very useful.
        Otherwise, you would just have to know that OpenSSH is the
        project responsible for this command.
      </para>
      <note>
        <title>Symbolic Links</title>
        <para>
          The <command>rpm -qf</command> command follows symbolic links. This 
	  was not always true with older versions of RPM, but modern RPM versions
          can trace package ownership to files placed in linked directories.
        </para>
        <para>
          For example, the directory /usr/lib/X11 is a link to the real
          directory, /usr/X11R6/lib/X11. You can track the package
          ownership of a file in that directory, XKeysymDB, for example,
          by using the following command:
        </para>
        <para>
          <command>rpm -qf /usr/lib/X11/XKeysymDB</command>
        </para>
        <para>
          <screen>XFree86-4.2.0-72</screen>
        </para>
        <para>
          This file, XKeysymDB, really resides in /usr/X11R6/lib/X11.
        </para>
      </note>
    </section>
  </section>
  <section id="RPM_Guide-Using_RPM_DB-getting_information">
    <title>Getting Information on Packages</title>
    <para>
      The query options for the rpm command include a whole set of
      options that return information about the files that make up a
      package, the scripts, and other parts of the original package. The
      following sections cover these options.
    </para>
    <section id="RPM_Guide-USing_RPM_DB-getting_information-describing_packages">
      <title>Describing packages</title>
      <para>
        The <option>–i</option> option with an rpm query command tells the rpm command
        to output descriptive information about the package. You can
        also use the longer option, <option>--info</option>, in place of 
	<option>–i</option>. The basic syntax is:
      </para>
      <para>
        <command>rpm -qi <replaceable>package</replaceable></command>
      </para>
      <warning>
        <title>Warning</title>
      <para>
        The order of the command-line options is very important.
        Remember that the rpm command has the following general syntax:
      </para>
      <para>
        <command>rpm <replaceable>–MajorOperation</replaceable>
        <replaceable>–extra_options packages_or_files</replaceable></command>
      </para>
      <para>
        <command>rpm –i</command> installs packages and <command>rpm –q</command>
        queries packages. The <command>rpm –qi</command> command outputs
        the descriptive information on packages. If you make a mistake 
        and place the <literal>i</literal> in front of the <literal>q</literal>,
        you are telling the rpm command to perform a different operation.
      </para>
      </warning>
      <para>
        When you run this command, being very careful with the order of
        the options, you’ll see output like the following, which
        describes the tcsh shell package.
      </para>
      <para>
        <command>rpm -qi tcsh-6.17-6</command>
      </para>
        <screen>Name : tcsh Relocations: (not relocateable)
Version : 6.17 Vendor: Fedora Project
Release : 6 Build Date: Tue 15 Dec 2009 11:28:11 AM EST
Install Date: Fri 27 Aug 2010 07:41:03 PM EDT      Build Host: localhost
Group       : System Environment/Shells     Source RPM: tcsh-6.17-6.fc13.src.rpm
Size        : 1191282                          License: BSD
Signature   : RSA/SHA256, Fri 05 Feb 2010 09:30:43 AM EST, Key ID 7edc6ad6e8e40fde
Packager    : Fedora Project
URL         : http://www.tcsh.org/
Summary     : An enhanced version of csh, the C shell
Description :
Tcsh is an enhanced but completely compatible version of csh, the C
shell.  Tcsh is a command language interpreter which can be used both
as an interactive login shell and as a shell script command processor.
Tcsh includes a command line editor, programmable word completion,
spelling correction, a history mechanism, job control and a C language
like syntax.
</screen>
      <para>
        The sections on custom queries following in this chapter show
        how you can query for any information stored in a package
        header, including all of the information shown with <command>rpm
        –qi</command>, as well as any other header tag.
      </para>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-package_groups">
      <title>Package groups</title>
      <para>
        RPM packages can be placed into groups, merely arbitrary names
        for a set of packages. The <command>rpm –qi</command> command,
        shown previously, lists the group for a package, if there is one.
        For the tcsh package shown in the previous example, the package is
        <literal>System Environment/Shells</literal>.
      </para>
      <para>
        The <option>–g</option> option to <command>rpm –q</command> tells rpm
        to list all the packages in a given group. You can also use the
        longer option, <option>--group</option>, in place of <option>–g</option>.
        The basic syntax follows:
      </para>
      <para>
        <command>rpm –qg <replaceable>group_name</replaceable></command>
      </para>
      <para>
        For example:
      </para>
      <para>
        <command>rpm -qg "System Environment/Shells"</command>
      </para>
      <screen>dash-0.5.5.1-3.x86_64
bash-4.1.7-1.x86_64
tcsh-6.17-6.x86_64</screen>
      <note>
        <title>Spaces in group names</title>
        <para>
          This group has a space in its name, so you need quotation marks
          to pass the group name as one parameter to the rpm command.
        </para>
       </note>
    </section>
    <section>
      <title>Listing the files in a package</title>
      <para>
        The <option>–l</option> (ell) option queries all the files in a package. You
        can also use the longer option, --list, in place of –l. The
        basic syntax is:
      </para>
      <para>
        rpm –ql package
      </para>
      <para>
        For example, to query the files in the tcsh package, you’ll
        see the following:
      </para>
      <para>
        <command>rpm -ql tcsh</command>
      </para>
      <screen>
        /bin/csh
        /bin/tcsh
        /usr/share/doc/tcsh-6.10
        /usr/share/doc/tcsh-6.10/FAQ
        /usr/share/doc/tcsh-6.10/Fixes
        /usr/share/doc/tcsh-6.10/NewThings
        /usr/share/doc/tcsh-6.10/complete.tcsh
        /usr/share/doc/tcsh-6.10/eight-bit.txt
        /usr/share/doc/tcsh-6.10/tcsh.html
        /usr/share/doc/tcsh-6.10/tcsh.html/header.html
        /usr/share/doc/tcsh-6.10/tcsh.html/index.html
        /usr/share/doc/tcsh-6.10/tcsh.html/lists.html
        /usr/share/doc/tcsh-6.10/tcsh.html/tcsh.man
        /usr/share/doc/tcsh-6.10/tcsh.html/tcsh.man2html
        /usr/share/doc/tcsh-6.10/tcsh.html/top.html
        /usr/share/locale/de/LC_MESSAGES/tcsh
        /usr/share/locale/el/LC_MESSAGES/tcsh
        /usr/share/locale/es/LC_MESSAGES/tcsh
        /usr/share/locale/fr/LC_MESSAGES/tcsh
        /usr/share/locale/it/LC_MESSAGES/tcsh
        /usr/share/locale/ja/LC_MESSAGES/tcsh
        /usr/share/man/man1/tcsh.1.gz
      </screen>
      <note>
        <title>Listing multiple packages</title>
      <para>
        You can pass more than one package name to this option, but it
        won’t tell you which package owns which file. Use the
        <option>--filesbypkg</option> option to list files by package.
      </para>
      <para>
        For example:
      </para>
      <para>
        <command>rpm -q --filesbypkg file openssh-clients</command>
      </para>
      <screen>
        file /usr/bin/file
        file /usr/share/magic
        file /usr/share/magic.mgc
        file /usr/share/magic.mime
        file /usr/share/man/man1/file.1.gz
        file /usr/share/man/man5/magic.5.gz
        openssh-clients /etc/ssh/ssh_config
        openssh-clients /usr/bin/sftp
        openssh-clients /usr/bin/slogin
        openssh-clients /usr/bin/ssh
        openssh-clients /usr/bin/ssh-add
        openssh-clients /usr/bin/ssh-agent
        openssh-clients /usr/bin/ssh-keyscan
        openssh-clients /usr/share/man/man1/sftp.1.gz
        openssh-clients /usr/share/man/man1/slogin.1.gz
        openssh-clients /usr/share/man/man1/ssh-add.1.gz
        openssh-clients /usr/share/man/man1/ssh-agent.1.gz
        openssh-clients /usr/share/man/man1/ssh-keyscan.1.gz
        openssh-clients /usr/share/man/man1/ssh.1.gz
      </screen>
      <para>
        Use this option without –l, because the –l option will also
        list the files alone, without any package name.
      </para>
      </note>
      <para>
        The –v (verbose) option can give you more information on the
        files when used with the various query options. For example:
      </para>
      <para>
        <command>rpm -qlv tcsh</command>
      </para>
      <screen>
lrwxrwxrwx    1 root    root                        4 Dec 15  2009 /bin/csh -&gt; tcsh
-rwxr-xr-x    1 root    root                   386984 Dec 15  2009 /bin/tcsh
drwxr-xr-x    2 root    root                        0 Dec 15  2009 /usr/share/doc/tcsh-6.17
-rw-r--r--    1 root    root                    17782 Mar  2  2006 /usr/share/doc/tcsh-6.17/BUGS
-rw-r--r--    1 root    root                    12773 May 19  2004 /usr/share/doc/tcsh-6.17/FAQ
-rw-r--r--    1 root    root                    85246 Jul 10  2009 /usr/share/doc/tcsh-6.17/Fixes
-rw-r--r--    1 root    root                     6518 Oct  2  1998 /usr/share/doc/tcsh-6.17/NewThings
-rw-r--r--    1 root    root                    11809 May 19  2004 /usr/share/doc/tcsh-6.17/WishList
-rw-r--r--    1 root    root                    56615 Oct  1  2007 /usr/share/doc/tcsh-6.17/complete.tcsh
-rw-r--r--    1 root    root                    46682 Dec 15  2009 /usr/share/locale/de/LC_MESSAGES/tcsh
-rw-r--r--    1 root    root                    48387 Dec 15  2009 /usr/share/locale/el/LC_MESSAGES/tcsh
-rw-r--r--    1 root    root                    45670 Dec 15  2009 /usr/share/locale/en/LC_MESSAGES/tcsh
-rw-r--r--    1 root    root                    48234 Dec 15  2009 /usr/share/locale/es/LC_MESSAGES/tcsh
-rw-r--r--    1 root    root                    45130 Dec 15  2009 /usr/share/locale/et/LC_MESSAGES/tcsh
-rw-r--r--    1 root    root                    47757 Dec 15  2009 /usr/share/locale/fi/LC_MESSAGES/tcsh
-rw-r--r--    1 root    root                    47978 Dec 15  2009 /usr/share/locale/fr/LC_MESSAGES/tcsh
-rw-r--r--    1 root    root                    49085 Dec 15  2009 /usr/share/locale/it/LC_MESSAGES/tcsh
-rw-r--r--    1 root    root                    33848 Dec 15  2009 /usr/share/locale/ja/LC_MESSAGES/tcsh
-rw-r--r--    1 root    root                    45160 Dec 15  2009 /usr/share/locale/pl/LC_MESSAGES/tcsh
-rw-r--r--    1 root    root                    46148 Dec 15  2009 /usr/share/locale/ru/LC_MESSAGES/tcsh
-rw-r--r--    1 root    root                    45492 Dec 15  2009 /usr/share/locale/uk/LC_MESSAGES/tcsh
lrwxrwxrwx    1 root    root                        9 Dec 15  2009 /usr/share/man/man1/csh.1.gz -&gt; tcsh.1.gz
-rw-r--r--    1 root    root                    63984 Dec 15  2009 /usr/share/man/man1/tcsh.1.gz
      </screen>
      <para>
        This information is the same as a long listing on the files.
      </para>
      <para>
        As you can see, the <option>–l</option> option results in quite a lot of
        output. In some cases, though, you aren’t interested in
        documentation and other miscellaneous files in the package.
        It’s the commands and libraries that cause the most
        package-related problems. To help with this, you can use a
        series of rpm options to list only certain types of files.
      </para>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-listing_conf_files">
      <title>Listing the configuration files for a package</title>
      <para>
        The <option>–c</option> option tells <command>rpm –q</command> to list the
        configuration files for a package. You can also use the longer
        option, <option>--configfiles</option>, in place of <option>–c</option>.
	The basic syntax is:
      </para>
      <para>
        <command>rpm –qc <replaceable>package_name</replaceable></command>
      </para>
      <para>
        For example:
      </para>
      <para>
        <command>rpm -qc bash</command>
      </para>
      <screen>
        /etc/skel/.bash_logout
        /etc/skel/.bash_profile
        /etc/skel/.bashrc
      </screen>
      <para>
        This command lists the configuration files for the bash package.
      </para>
      <para>
        Some packages don’t have configuration files, as shown
        following:
      </para>
      <para>
        <command>rpm -qc python</command>
      </para>
      <screen>
        
      </screen>
      <para>
        In this case, the rpm command provides no output. Other packages
        have a lot of configuration files, such as the sendmail mail
        transfer agent, as shown following:
      </para>
      <para>
        <command>rpm -qc sendmail</command>
      </para>
      <screen>
        /etc/aliases
        /etc/mail/Makefile
        /etc/mail/access
        /etc/mail/domaintable
        /etc/mail/helpfile
        /etc/mail/local-host-names
        /etc/mail/mailertable
        /etc/mail/sendmail.mc
        /etc/mail/statistics
        /etc/mail/trusted-users
        /etc/mail/virtusertable
        /etc/rc.d/init.d/sendmail
        /etc/sendmail.cf
        /etc/sysconfig/sendmail
        /usr/lib/sasl/Sendmail.conf
      </screen>
      <para>
        As with the <option>–l</option> option, the <option>–v</option>
	option provides more information on each file, as shown following:
      </para>
      <para>
        <command>rpm -qcv bash</command>
      </para>
      <screen>
-rw-r--r--    1 root    root                       18 May 21 13:32 /etc/skel/.bash_logout
-rw-r--r--    1 root    root                      176 May 21 13:32 /etc/skel/.bash_profile
-rw-r--r--    1 root    root                      124 May 21 13:32 /etc/skel/.bashrc
      </screen>
    </section>
    <section>
      <title>Listing the documentation files for a package</title>
      <para>
        Similarly to the <option>–c</option> option, the <option>–d</option>
	option tells the <command>rpm –q</command> command to list just the 
	documentation files for a package. The basic syntax is:
      </para>
      <para>
        <command>rpm –qd <replaceable>package_name</replaceable></command>
      </para>
      <para>
        For example:
      </para>
      <para>
        <command>rpm -qd tcsh</command>
      </para>
      <screen>
        /usr/share/doc/tcsh-6.10/FAQ
        /usr/share/doc/tcsh-6.10/Fixes
        /usr/share/doc/tcsh-6.10/NewThings
        /usr/share/doc/tcsh-6.10/complete.tcsh
        /usr/share/doc/tcsh-6.10/eight-bit.txt
        /usr/share/doc/tcsh-6.10/tcsh.html/header.html
        /usr/share/doc/tcsh-6.10/tcsh.html/index.html
        /usr/share/doc/tcsh-6.10/tcsh.html/lists.html
        /usr/share/doc/tcsh-6.10/tcsh.html/tcsh.man
        /usr/share/doc/tcsh-6.10/tcsh.html/tcsh.man2html
        /usr/share/doc/tcsh-6.10/tcsh.html/top.html
        /usr/share/man/man1/tcsh.1.gz
      </screen>
      <note>
       <title>Getting more information</title>
        <para>
         You can add the –v option to all of the file-listing options
         to get more information.
       </para>
      </note>
      <para>
        You can also use the longer option, <option>--docfiles</option>, 
	in place of <option>–d</option>.
      </para>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-file_state">
      <title>Listing the state of the files in a package</title>
      <para>
        The <option>–s</option> option to the <command>rpm –q</command>
	command lists the state of each file in a package. The basic syntax is:
      </para>
      <para>
        <command>rpm –qs <replaceable>package_name</replaceable></command>
      </para>
      <para>
        For example:
      </para>
      <para>
        <command>rpm -qs tcsh</command>
      </para>
      <screen>
        normal /bin/csh
        normal /bin/tcsh
        normal /usr/share/doc/tcsh-6.10
        normal /usr/share/doc/tcsh-6.10/FAQ
        normal /usr/share/doc/tcsh-6.10/Fixes
        normal /usr/share/doc/tcsh-6.10/NewThings
        normal /usr/share/doc/tcsh-6.10/complete.tcsh
        normal /usr/share/doc/tcsh-6.10/eight-bit.txt
        normal /usr/share/doc/tcsh-6.10/tcsh.html
        normal /usr/share/doc/tcsh-6.10/tcsh.html/header.html
        normal /usr/share/doc/tcsh-6.10/tcsh.html/index.html
        normal /usr/share/doc/tcsh-6.10/tcsh.html/lists.html
        normal /usr/share/doc/tcsh-6.10/tcsh.html/tcsh.man
        normal /usr/share/doc/tcsh-6.10/tcsh.html/tcsh.man2html
        normal /usr/share/doc/tcsh-6.10/tcsh.html/top.html
        not installed /usr/share/locale/de/LC_MESSAGES/tcsh
        not installed /usr/share/locale/el/LC_MESSAGES/tcsh
        not installed /usr/share/locale/es/LC_MESSAGES/tcsh
        not installed /usr/share/locale/fr/LC_MESSAGES/tcsh
        not installed /usr/share/locale/it/LC_MESSAGES/tcsh
        not installed /usr/share/locale/ja/LC_MESSAGES/tcsh
        normal /usr/share/man/man1/tcsh.1.gz
      </screen>
      <para>
        You can also use the long option, <option>--state</option>,
	in place of <option>–s</option>.
      </para>
      <para>
        You can combine the <option>–s</option> option with other file filters,
	such as <option>–d</option>, for listing only the documentation files
	for a package.
      </para>
      <para>
        Table 5-2 lists the states that RPM supports.
      </para>
      <para>
        Table 5-2 RPM File States
      </para>
      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>
                <para>
                  State
                </para>
              </entry>
              <entry>
                <para>
                  Usage
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  normal
                </para>
              </entry>
              <entry>
                <para>
                  The file has been installed.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  not installed
                </para>
              </entry>
              <entry>
                <para>
                  The file from the package is not installed.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  replaced
                </para>
              </entry>
              <entry>
                <para>
                  The file has been replaced.
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Sometimes files in a package may have been skipped during
        installation with options such as <option>--excludedocs</option>.
	This can lead to non-normal states. You may have also modified 
	files installed from a given package.
      </para>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-listing_scripts">
      <title>Listing the scripts in a package</title>
      <para>
        RPM packages can have preinstallation, postinstallation,
        preuninstallation, and postuninstallation scripts. These are
        scripts that the rpm command will execute before and after
        installing a package, as well as before and after removing the
        package. The <option>--scripts</option> option to the 
	<command>rpm –q</command> command lists the
        scripts associated with a package. The basic syntax follows:
      </para>
      <para>
        <command>rpm -q --scripts <replaceable>package_name</replaceable></command>
      </para>
      <para>
        For example:
      </para>
      <para>
        <command>rpm -q --scripts tcsh</command>
      </para>
      <screen>
if [ ! -f /etc/shells ]; then
 echo "/bin/tcsh" &gt;&gt; /etc/shells
 echo "/bin/csh"        &gt;&gt; /etc/shells
else
 grep -q '^/bin/tcsh$' /etc/shells || \
 echo "/bin/tcsh" &gt;&gt; /etc/shells
 grep -q '^/bin/csh$'  /etc/shells || \
 echo "/bin/csh"        &gt;&gt; /etc/shells
fi
postuninstall scriptlet (using /bin/sh):
if [ ! -x /bin/tcsh ]; then
 grep -v '^/bin/tcsh$'  /etc/shells | \
 grep -v '^/bin/csh$' &gt; /etc/shells.rpm &amp;&amp; \
 mv /etc/shells.rpm /etc/shells
fi
      </screen>
      <para>
        The simple scripts shown here add an entry to the /etc/shells
        file and clean up the entry when uninstalled.
      </para>
      <important>
        <title>Cleaning up</title>
        <para>
          Cleaning up any changes your package makes on uninstallation is
          a very good idea. See the chapters in Part II, Creating RPMs,
          for details on making your own well-behaved packages.
        </para>
      </important>
      <para>
        Other packages have more complex scripts, as shown following:
      </para>
      <para>
        <command>rpm -q --scripts sendmail</command>
      </para>
      <screen>
preinstall scriptlet (using /bin/sh):
/usr/sbin/useradd -u 47 -d /var/spool/mqueue -r -s /sbin/nologin mailnull >/dev/null 2&gt;&amp;1
/usr/sbin/useradd -u 51 -d /var/spool/mqueue -r -s /sbin/nologin smmsp >/dev/null 2&gt;&amp;1
exit 0
postinstall scriptlet (using /bin/sh):
/sbin/chkconfig --add sendmail
# Set up the alternatives files for MTAs.
/usr/sbin/alternatives --install /usr/sbin/sendmail mta /usr/sbin/sendmail.sendmail 90 \
        --slave /usr/bin/mailq mta-mailq /usr/bin/mailq.sendmail \
        --slave /usr/bin/newaliases mta-newaliases /usr/bin/newaliases.sendmail \
        --slave /usr/bin/rmail mta-rmail /usr/bin/rmail.sendmail \
        --slave /usr/lib/sendmail mta-sendmail /usr/lib/sendmail.sendmail \
        --slave /etc/pam.d/smtp mta-pam /etc/pam.d/smtp.sendmail \
        --slave /usr/share/man/man8/sendmail.8.gz mta-sendmailman /usr/share/man/man8/sendmail.sendmail.8.gz \
        --slave /usr/share/man/man1/mailq.1.gz mta-mailqman /usr/share/man/man1/mailq.sendmail.1.gz \
        --slave /usr/share/man/man1/newaliases.1.gz mta-newaliasesman /usr/share/man/man1/newaliases.sendmail.1.gz \
        --slave /usr/share/man/man5/aliases.5.gz mta-aliasesman /usr/share/man/man5/aliases.sendmail.5.gz \
        --initscript sendmail

# Rebuild maps
{
        chown root /etc/aliases.db /etc/mail/access.db \
                /etc/mail/mailertable.db /etc/mail/domaintable.db \
                /etc/mail/virtusertable.db
        SM_FORCE_DBREBUILD=1 /etc/mail/make
        SM_FORCE_DBREBUILD=1 /etc/mail/make aliases
} > /dev/null 2&gt;&amp;1
exit 0
preuninstall scriptlet (using /bin/sh):
if [ $1 = 0 ]; then
        /etc/rc.d/init.d/sendmail stop &gt;/dev/null 2&gt;&amp;1
        /sbin/chkconfig --del sendmail
        /usr/sbin/alternatives --remove mta /usr/sbin/sendmail.sendmail
fi
exit 0
postuninstall scriptlet (using /bin/sh):
if [ "$1" -ge "1" ]; then
        /etc/rc.d/init.d/sendmail condrestart &gt;/dev/null 2&gt;&amp;1
        mta=`readlink /etc/alternatives/mta`
        if [ "$mta" == "/usr/sbin/sendmail.sendmail" ]; then
                /usr/sbin/alternatives --set mta /usr/sbin/sendmail.sendmail
        fi
fi
exit 0
      </screen>
      <para>
        In this case, the main script is the post-install script, which
        tries to convert old-format data into the new format, thereby
        helping users upgrade to the newer release.
      </para>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-Listing_changed">
      <title>Listing what has changed</title>
      <para>
        The <option>--changelog</option> option lists what has changed, 
	as described in a file that logs changes, from previous versions
	of a given package. The change log is just a convention, so not all
        packages will sport this nifty feature. In addition, the change
        log for many packages documents the changes in the RPM
        packaging, not the changes in the underlying application. If a
        change log is available, however, this can prove a very good way
        to help determine whether you want to upgrade to a new version
        of a package.
      </para>
      <para>
        For example, a network server application may have been updated
        to fix some security problems. In that case, you likely want to
        upgrade. Other changes may not affect your site, leading you to
        decide not to upgrade.
      </para>
      <para>
        The basic format of the command is:
      </para>
      <para>
        <command>rpm –q --changelog <replaceable>package_name</replaceable></command>
      </para>
      <para>
        For example, the following shows the beginning of the changelog 
	for the bash package:
      </para>
      <para>
        <command>rpm -q --changelog bash</command>
      </para>
      <screen>
* Fri May 21 2010 Roman Rakus rrakus@redhat.com - 4.1.7-1
- Patch level 7

* Wed Mar 31 2010 Roman Rakus rrakus@redhat.com - 4.1.2-4
- Corrected requires patch (#563301)

* Fri Jan 22 2010 rrakus@redhat.com 4.1.2-3
- Don't use cond-rmatch patch
- Use manso patch
- Include COPYING in base bash rpm

* Fri Jan 22 2010 rrakus@redhat.com 4.1.2-2
- Correct patchlevel 2

* Fri Jan 22 2010 Roman Rakus rrakus@redhat.com 4.1.2-1
- Patchlevel 4.2
- Removed old patch
- Returned back manso patch

* Fri Jan 08 2010 Roman Rakus rrakus@redhat.com 4.1.0-2
- Include COPYING in doc dir

* Mon Jan 04 2010 Roman Rakus rrakus@redhat.com - 4.1.0-1
- Upstream 4.1

* Sun Dec 27 2009 Roman Rakus rrakus@redhat.com - 4.1-0.2.rc1
- Fixed patch for fuzz=0

* Sun Dec 27 2009 Roman Rakus rrakus@redhat.com - 4.1-0.1.rc1
- Upstream 4.1.rc1

* Fri Dec 11 2009 Roman Rakus rrakus@redhat.com - 4.0.35-2
- Don't segfault when TERM=eterm* and EMACS is unset (#530911)

* Thu Oct 29 2009 Roman Rakus rrakus@redhat.com - 4.0.35-1
- Patch level 35
      </screen>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-Combining_queries">
      <title>Combining queries</title>
      <para>
        The rpm command is very flexible in allowing you to combine
        queries. Just start the command with <command>rpm –q</command>
	and add the various options either on their own, such as 
	<option>–q</option> with <option>–s</option> and
        <option>–f</option>, or together, such as 
	<option>–qsf</option>.
      </para>
      <para>
        The following sections show a few handy combinations of the
        options you can use for real-world package-management tasks.
      </para>
      <section id="RPM_Guide-Using_RPM_DB-Combining_queries-Decription_documentation">
        <title>Listing Package Description and Documentation Files</title>
        <para>
          To find information on a package and where it is documented,
          use the <option>–qdi</option> option to rpm (a combination of the
          <option>–q</option>, <option>–d</option>, and <option>–i</option> options):
        </para>
        <para>
          <command>rpm -qdi grep</command>
        </para>
        <screen>
Name        : grep                         Relocations: (not relocatable)
Version     : 2.6.3                             Vendor: Fedora Project
Release     : 1.fc13                        Build Date: Wed 07 Apr 2010 05:58:58 PM EDT
Install Date: Fri 27 Aug 2010 07:03:07 PM EDT      Build Host: x86-06.phx2.fedoraproject.org
Group       : Applications/Text             Source RPM: grep-2.6.3-1.fc13.src.rpm
Size        : 800493                           License: GPLv3+
Signature   : RSA/SHA256, Wed 07 Apr 2010 06:48:20 PM EDT, Key ID 7edc6ad6e8e40fde
Packager    : Fedora Project
URL         : http://www.gnu.org/software/grep/
Summary     : Pattern matching utilities
Description :
The GNU versions of commonly used grep utilities. Grep searches through
textual input for lines which contain a match to a specified pattern and then
prints the matching lines. GNU's grep utilities include grep, egrep and fgrep.

GNU grep is needed by many scripts, so it shall be installed on every system.
/usr/share/doc/grep-2.6.3/ABOUT-NLS
/usr/share/doc/grep-2.6.3/AUTHORS
/usr/share/doc/grep-2.6.3/COPYING
/usr/share/doc/grep-2.6.3/ChangeLog
/usr/share/doc/grep-2.6.3/NEWS
/usr/share/doc/grep-2.6.3/README
/usr/share/doc/grep-2.6.3/THANKS
/usr/share/doc/grep-2.6.3/TODO
/usr/share/info/grep.info.gz
/usr/share/man/man1/egrep.1.gz
/usr/share/man/man1/fgrep.1.gz
/usr/share/man/man1/grep.1.gz
        </screen>
        <para>
          It can sometimes be difficult to track down the documentation for
	  a given package. Some packages use Unix manual pages; others use
	  info files, and still others provide HTML for other formatted
          manuals. Some have no real documentation at all.
        </para>
      </section>
      <section id="RPM_Guide-Using_RPM_DB-Combining_queries-State_of_config_files">
        <title>Listing the State of Configuration Files</title>
        <para>
          To find the state of all the configuration files for a given
          Linux command, use a command with the <option>–qcsf</option>
	  option with the name of the file, as shown here, or the
	  <option>-qcs</option> option with the name of a package.
        </para>
        <para>
          For example:
        </para>
        <para>
  	  <command>rpm -qcsf /bin/bash</command>
        </para>
        <screen>
normal /etc/skel/.bash_logout
normal /etc/skel/.bash_profile
normal /etc/skel/.bashrc
        </screen>
      </section>
      <section id="RPM_Guide-Using_RPM_DB-Combining_queries-Recently_installed">
        <title>Listing the Most Recently Installed Packages</title>
        <para>
          To list the most recently installed packages, use the
          following command with the <option>--last</option> option. This
	  is very useful if you recently installed or upgraded a number of
	  packages and something unexpected happens. If you cannot remember
	  the package names, you can use the <option>--last</option> option
	  to list out packages in reverse order of installation.
        </para>
        <para>
          You can pipe the output of a query to the head command to show
          only the last ten packages that were installed or upgraded, as
          shown following:
        </para>
        <para>
          <command>rpm -qa --last | head</command>
        </para>
        <screen>
kmod-nvidia-2.6.34.6-47.fc13.x86_64-256.53-1.fc13 Sat 18 Sep 2010 09:54:48 AM EDT
xorg-x11-drv-nvidia-256.53-1.fc13             Sat 18 Sep 2010 09:51:00 AM EDT
kmod-nvidia-2.6.34.6-54.fc13.x86_64-256.53-1.fc13.3 Sat 18 Sep 2010 09:50:59 AM EDT
xorg-x11-drv-nvidia-libs-256.53-1.fc13        Sat 18 Sep 2010 09:50:57 AM EDT
google-talkplugin-1.5.1.0-1                   Wed 15 Sep 2010 07:38:46 PM EDT
mythplugins-0.23.1-2.fc13                     Sun 12 Sep 2010 09:35:42 PM EDT
mythweather-0.23.1-2.fc13                     Sun 12 Sep 2010 09:35:40 PM EDT
perl-DateTime-Format-ISO8601-0.07-1.fc13      Sun 12 Sep 2010 09:35:39 PM EDT
perl-DateTime-Format-Builder-0.7901-5.fc13    Sun 12 Sep 2010 09:35:38 PM EDT
perl-Class-Factory-Util-1.7-6.fc13            Sun 12 Sep 2010 09:35:37 PM EDT 
        </screen>
        <para>
          You can pass options to the head command to show more or fewer
          than ten lines. In general, starting with the last ten
          packages can help you track down something you installed the
          day before.
        </para>
      </section>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-Cusomt_queries">
      <title>Creating custom queries</title>
      <para>
        The <option>--qf</option> or <option>--queryformat</option> option
	allows you to create custom queries with the rpm command, although
	in a rather difficult manner. You need to pass a query format string,
	the syntax of which originates with the C printf function and requires
        precision.
      </para>
      <para>
        The basic syntax of the query format is <option>%{tag_name}</option>. 
	(The percent sign is about the only part that comes from the C printf
        function.) You can combine tag names to display more than one
        item per package. You can also add formatting options following
        C language conventions.
      </para>
      <para>
        For example, to list all package names, use a command like the
        following (the output is abbreviated):
      </para>
      <para>
        <command>rpm -qa --qf "%{NAME}"</command>
      </para>
      <screen>
libxml2tcp_wrappers-libstracerouteperl-Config-Tinylibsampleratefedora-icon-themefftw2dvb-appsreport-plugin-localsaveglib2-develqwtintltoolperl-Locale-Maketext-Gettextliblastfmxorg-x11-fonts-ISO8859-1-100dpilibpng-devellibgeotifffontconfigPackageKit-glibshared-mime-infoxorg-x11-drv-sisusbxmlgraphics-commonsopenoffice.org-graphicfilterm17n-db-oriyadejavu-sans-fontslibselinux-pythonapr-utilxorg-x11-drv-cirruslibsilcmysql-serverpnm2ppanssmythmusicdbus-glibcyrus-sasl-libfedora-release-notesekigaperl-Net-SSLeayperl-HTML-Parsermingettyphp-clixorg-x11-drv-nvidia-libspatchgnome-games-extra
      </screen>
      <para>
        This command used the simplest format, which is just the value
        of the tag in the package headers, in this case the package
        names. Because we used no other formatting, this command outputs
        all the package names smashed together. To deal with this
        problem in the output, you can place a \n, the C language
        convention for a newline character, at the end of the format
        string. This fixes the output considerably.
      </para>
      <para>
        For example (showing just the first few entries):
      </para>
      <para>
        <command>rpm -qa --qf "%{NAME}\n"</command>
      </para>
      <screen>
libxml2
tcp_wrappers-libs
traceroute
perl-Config-Tiny
libsamplerate
fedora-icon-theme
fftw2
dvb-apps
report-plugin-localsave
glib2-devel
      </screen>
      <para>
        This command provides a custom query that is essentially the
        same as <command>rpm -qa</command>. You’ll likely not use this
        command in favor of the simpler rpm option, but you can use this
        example as a guide for creating your own custom queries.
      </para>
      <note>
        <title>popt aliases</title>
        <para>
          A great many of the command-line options to the rpm command are
          defined as popt aliases. These popt aliases define the rpm
          command-line options in terms of longer query format strings.
          See <xref linkend="ch-customizing-rpm"/>  for more information on popt.
        </para>
      </note>
      <para>
        You can add items to the query string and use C language
        conventions for formatting and controlling the amount of space
        provided for each item output. For example, the following command 
	prints the name and platform for all packages, showing the first 
	few entries, formatted with 20 characters for each item:
      </para>
      <para>
        <command>rpm -qa --qf "%-20{NAME} %-20{PLATFORM}\n"</command>
      </para>
      <screen>
libxml2              x86_64-redhat-linux-gnu
tcp_wrappers-libs    i686-redhat-linux-gnu
traceroute           x86_64-redhat-linux-gnu
perl-Config-Tiny     noarch-redhat-linux-gnu
libsamplerate        x86_64-redhat-linux-gnu
fedora-icon-theme    noarch-redhat-linux-gnu
fftw2                x86_64-redhat-linux-gnu
dvb-apps             x86_64-redhat-linux-gnu
report-plugin-localsave x86_64-redhat-linux-gnu
glib2-devel          x86_64-redhat-linux-gnu
      </screen>
      </section>
      <section id="RPM_Guide-Using_RPM_DB-Query_format_tags">
        <title>Working With Query Format Tags</title>
        <para>
          To build queries with the <option>--queryformat</option> option,
	  you need to know what tags you can use. To list the names of the
	  available query format tags, use the <option>--querytags</option>
	  option, which returns a large set of tags, truncated here for space:
        </para>
        <para>
          <command>rpm --querytags</command>
        </para>
        <screen>
          NAME
          VERSION
          RELEASE
          SUMMARY
          DESCRIPTION
          BUILDTIME
        </screen>
        <para>
          Each of these tags also has a version with a <literal>RPMTAG_</literal>
	  prefix, such as <literal>RPMTAG_NAME</literal>. You can use this tags
	  with or without the <literal>RPMTAG_</literal> prefix. For example:
        </para>
        <para>
  	  <command>rpm -q --qf "%{RPMTAG_NAME}\n" sendmail</command>
        </para>
        <screen>
          sendmail
        </screen>
        <para>
          Note how this command uses the <option>–q</option> option to query
	  for one package, instead of <option>–qa</option> to query for all
	  packages. You can use query formats with any of the rpm queries.
        </para>
        <para>
          The next sections cover the available tags based on the type
          of the information stored in the tag.
        </para>
      </section>
      <section id="RPM_Guide-Using_RPM_DB-Querying_for_package_information">
        <title>Querying for Package Information</title>
        <para>
          Many of the query format tags refer to package-information
          data stored in the RPM header, introduced in 
	  <xref linkend="ch-rpm-overview"/> . Table 5-3 lists the 
	  package-information tags.
        </para>
        <para>
          Table 5-3 Package-information query tags
        </para>
        <informaltable frame="all">
          <tgroup cols="2">
            <tbody>
              <row>
                <entry>
                  <para>
                    Tag
                  </para>
                </entry>
                <entry>
                  <para>
                    Holds
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    NAME
                  </para>
                </entry>
                <entry>
                  <para>
                    Package name
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    VERSION
                  </para>
                </entry>
                <entry>
                  <para>
                    Version number
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    RELEASE
                  </para>
                </entry>
                <entry>
                  <para>
                    Release number
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    SUMMARY
                  </para>
                </entry>
                <entry>
                  <para>
                    One-line summary of the package contents
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    DESCRIPTION
                  </para>
                </entry>
                <entry>
                  <para>
                    Descriptive text about the package
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    BUILDTIME
                  </para>
                </entry>
                <entry>
                  <para>
                    Time package was built
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    BUILDHOST
                  </para>
                </entry>
                <entry>
                  <para>
                    Host package was built on
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    SIZE
                  </para>
                </entry>
                <entry>
                  <para>
                    Size of all the regular files in the payload
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    LICENSE
                  </para>
                </entry>
                <entry>
                  <para>
                    License package was released under
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    GROUP
                  </para>
                </entry>
                <entry>
                  <para>
                    Descriptive group or category name for the package
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    OS
                  </para>
                </entry>
                <entry>
                  <para>
                    Operating system package was built for
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    ARCH
                  </para>
                </entry>
                <entry>
                  <para>
                    Architecture, such as i386
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    SOURCERPM
                  </para>
                </entry>
                <entry>
                  <para>
                    The associated source RPM
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    CHANGELOGTIME
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of changelog times
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    CHANGELOGNAME
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of changelog names
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    CHANGELOGTEXT
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of changelog text entries
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    PREIN
                  </para>
                </entry>
                <entry>
                  <para>
                    Pre-install script
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    POSTIN
                  </para>
                </entry>
                <entry>
                  <para>
                    Post-install script
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    PREUN
                  </para>
                </entry>
                <entry>
                  <para>
                    Pre-uninstall script
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    POSTUN
                  </para>
                </entry>
                <entry>
                  <para>
                    Post uninstall script
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    PLATFORM
                  </para>
                </entry>
                <entry>
                  <para>
                    Platform
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
          All of these tags, except for the <literal>CHANGELOGTIME</literal>,
	  <literal>CHANGELOGTEXT</literal> and <literal>CHANGELOGNAME</literal>
	  tags, are single-value tags.
        </para>
      </section>
      <section id="RPM_Guide-Using_RPM_DB-Formatting_arrays">
        <title>Formatting Arrays</title>
        <para>
          Many of the header entries are arrays, so the header tags can
          hold more than one item. For example, RPM packages can have
          more than one file in the payload.
        </para>
        <para>
          To specify a format for each item in an array, use square
          brackets. For example:
        </para>
        <para>
          <command>rpm -q --queryformat "[%-50{FILENAMES} %{FILESIZES}\n]"
          sendmail</command>
        </para>
        <screen>
/etc/NetworkManager/dispatcher.d/10-sendmail       96
/etc/mail                                          4096
/etc/mail/Makefile                                 92
/etc/mail/access                                   469
/etc/mail/access.db                                0
/etc/mail/aliasesdb-stamp                          0
/etc/mail/domaintable                              233
/etc/mail/domaintable.db                           0
/etc/mail/helpfile                                 5584
/etc/mail/local-host-names                         64
        </screen>
        <para>
          This example lists the files and file sizes within a package,
          with the listing of files truncated for size.
        </para>
        <para>
          If you want to mix array tags with non-array tags, you can use
          an equals sign, <literal>=</literal>, in front of the tag name 
	  to specify that the given tag should be repeated for each item
	  in the array. For example:
        </para>
        <para>
          <command>rpm -q --queryformat "[%-15{=NAME} %-50{FILENAMES}\n]"
          sendmail bash</command>
        </para>
        <screen>
sendmail        /etc/NetworkManager/dispatcher.d/10-sendmail      
sendmail        /etc/mail                                         
sendmail        /etc/mail/Makefile                                
sendmail        /etc/mail/access                                  
sendmail        /etc/mail/access.db  
bash            /bin/bash                                         
bash            /bin/sh                                           
bash            /etc/skel/.bash_logout                            
bash            /etc/skel/.bash_profile                           
bash            /etc/skel/.bashrc           
        </screen>
        <para>
          This example, also truncated for size, lists the package name
          along with the file name for the files contained in these two
          packages.
        </para>
      </section>
      <section id="RPM_Guide-Using_RPM_DB-Special_formatting">
        <title>Special Formatting</title>
        <para>
          Some of the tags within an RPM package header contain special
          binary information that usually makes no sense when printed
          out. To help with these header tags, you can use special RPM
          formatting options, using a syntax like the following:
        </para>
        <para>
          <literal>%{tag:special_format}</literal>
        </para>
        <para>
          For example, to print the <literal>INSTALLTIME</literal> tag, use
          <literal>%{INSTALLTIME:date}</literal>, which specifies to print
	  the <literal>INSTALLTIME</literal> tag in date format. For example:
        </para>
        <para>
          <command>rpm -q --qf "%{NAME}-%{VERSION}-%{RELEASE}
          %{INSTALLTIME:date}\n" bash</command>
        </para>
        <screen>
bash-4.1.7-1.fc13 Fri 27 Aug 2010 07:02:33 PM EDT
        </screen>
        <para>
          This example prints the <literal>NAME-VERSION-RELEASE</literal> 
	  of the package, along with the <literal>INSTALLTIME</literal>
	  in date format.
        </para>
        <para>
          Most tags in a header are optional. You can print the value of
          these tags, but you may get nothing. To help deal with this,
          you can use a conditional operator based loosely on the C
          language ternary operator. The basic syntax is:
        </para>
        <para>
          <literal>%|tag?{print_if_present}:{print_if_absent}|</literal>
        </para>
        <para>
          With the normal %{tag} syntax, this conditional syntax gets
          complicated really fast. You need to break the elements down.
          For example:
        </para>
        <para>
          <command>rpm -q --qf "%{NAME} %|EPOCH?{%{EPOCH}}:{(no Epoch)}|\n"
          perl</command>
        </para>
        <screen>
          perl 4
        </screen>
        <para>
          If the package has a value for the <literal>EPOCH</literal> tag, 
	  you will see output as shown in this example. Most packages do not 
	  have an <literal>EPOCH</literal> defined, in which case, you will \			see output like the following:
        </para>
        <para>
          RPM files likely hold packages that are not installed. If you
          query one of these packages, you will get the alternative
          text, as shown following:
        </para>
        <para>
          <command>rpm -q --qf "%{NAME} %|EPOCH?{%{EPOCH}}:{(no Epoch)}|\n"
          sendmail</command>
        </para>
        <screen>
sendmail (no Epoch)
        </screen>
        <para>
          See the "Getting Information on Package Files" section in this
          chapter for more on querying RPM package files. Other 
	  special-formatting options are described in the
          following sections on the dependency and file information tags.
        </para>
      </section>
      <section id="RPM_Guide-Using_RPM_DB-querying_pacakge_dependencies">
        <title>Querying for Package Dependencies</title>
        <para>
          A number of tags provide package dependency information. Each
          of these tags comes in triples, which are formatted similarly.
          For example, for the capabilities a package requires, you have
          the REQUIRENAME, REQUIREVERSION, and REQUIREFLAGS tags.
        </para>
        <para>
          The REQUIRENAME tag holds an array of required capability
          names. The REQUIREVERSION tag holds an array of the versions
          of the required capabilities. The REQUIREFLAGS tag ties the
          two together with a set of bit flags that specify whether the
          requirement is for a version less than the given number, equal
          to the given number, greater than or equal to the given
          number, and so on.
        </para>
        <para>
          Table 5-4 lists the dependency tags.
        </para>
        <para>
          Table 5-4 Dependency query tags
        </para>
        <informaltable frame="all">
          <tgroup cols="2">
            <tbody>
              <row>
                <entry>
                  <para>
                    Tag
                  </para>
                </entry>
                <entry>
                  <para>
                    Holds
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    CONFLICTFLAGS
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of flags for the capabilities this package
                    conflicts
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    CONFLICTNAME
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of capabilities that this package conflicts
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    CONFLICTVERSION
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of version numbers that this package conflicts
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    REQUIREFLAGS
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of flags for the capabilities this package
                    requires
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    REQUIRENAME
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of capabilities that this package requires
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    REQUIREVERSION
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of version numbers that this package requires
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    OBSOLETENAME
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of capabilities that this package obsoletes
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    OBSOLETEFLAGS
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of flags for the capabilities this package
                    obsoletes
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    OBSOLETEVERSION
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of version numbers that this package obsoletes
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    PROVIDENAME
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of capabilities that this package provides
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    PROVIDEFLAGS
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of flags for the capabilities this package
                    provides
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    PROVIDEVERSION
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of version numbers that this package provides
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
          Each of these tags is an array. The PROVIDENAME,
          PROVIDEVERSION, and PROVIDEFLAGS tags work similarly for the
          capabilities this package provides. The CONFLICTNAME,
          CONFLICTVERSION, and CONFLICTFLAGS tags specify the conflicts,
          and, the OBSOLETENAME, OBSOLETEVERSION, and OBSOLETEFLAGS tags
          specify the obsolete dependencies.
        </para>
        <para>
          The depflags special-formatting option prints out the flag
          tags, such as REQUIREFLAGS, in human-readable format. For
          example, the following command lists the requirements for a
          package:
        </para>
        <para>
          $ rpm -q --qf \
        </para>
        <para>
          "[%{REQUIRENAME} %{REQUIREFLAGS:depflags}
          %{REQUIREVERSION}\n]" sendmail
        </para>
        <para>
          rpmlib(VersionedDependencies) &lt;= 3.0.3-1
        </para>
        <para>
          chkconfig &gt;= 1.3
        </para>
        <para>
          /usr/sbin/useradd
        </para>
        <para>
          /bin/mktemp
        </para>
        <para>
          fileutils
        </para>
        <para>
          gawk
        </para>
        <para>
          sed
        </para>
        <para>
          sh-utils
        </para>
        <para>
          procmail
        </para>
        <para>
          bash &gt;= 2.0
        </para>
        <para>
          /bin/sh
        </para>
        <para>
          rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1
        </para>
        <para>
          rpmlib(CompressedFileNames) &lt;= 3.0.4-1
        </para>
        <para>
          For those requirements that have specific version numbers,
          this command prints out the version number along with the
          operator, such as &gt;= for a version greater than or equal to
          the given number.
        </para>
        <para>
          Note that for many of the requirements, there is no specific
          version information.
        </para>
        <para>
          Note
        </para>
        <para>
          In addition to normal capabilities, most packages will have
          some RPM-related requirements as well, which specify any
          required RPM versions, for example,
          rpmlib(CompressedFileNames).
        </para>
      </section>
      <section id="RPM-Guide-Using_RPM_DB-Querying_file_information">
        <title>Querying for File Information</title>
        <para>
          The file-information tags hold data on the files within the
          package payload, that is, the files the rpm command installs
          when you install the package. These tags are arrays, with one
          value per file.
        </para>
        <para>
          Table 5-5 lists the file-information tags.
        </para>
        <para>
          Table 5-5 File-information query tags
        </para>
        <informaltable frame="all">
          <tgroup cols="2">
            <tbody>
              <row>
                <entry>
                  <para>
                    Tag
                  </para>
                </entry>
                <entry>
                  <para>
                    Holds
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    OLDFILENAMES
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of full file names, used in older packages
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILESIZES
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of sizes for each file
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILEMODES
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of permissions for each file
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILERDEVS
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of rdev values for each file
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILEMTIMES
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of modified times for each file
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILEMD5S
                  </para>
                </entry>
                <entry>
                  <para>
                    MD5 checksum for each file
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILELINKTOS
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of link information for each file
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILEFLAGS
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of flags for each file
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILEUSERNAME
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of user names for the file owners
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILEGROUPNAME
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of group names for the file owners
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILEDEVICES
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of devices for each file
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILEINODES
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of inodes for each file
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILELANGS
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of language flags for each file
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    DIRINDEXES
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of values that matches the DIRNAMES with the
                    BASENBAMES
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    BASENAMES
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of file base names
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    DIRNAMES
                  </para>
                </entry>
                <entry>
                  <para>
                    Array of directories that matches up with BASENAMES
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
          The <literal>OLDFILENAMES</literal> tag is used when the files are not
          compressed, when the <literal>REQUIRENAME</literal> tag does not indicate
          rpmlib(CompressedFileNames).
        </para>
        <para>
          The <literal>FILESIZES</literal> tag specifies the size of each file in the
          payload, while the <literal>FILEMODES</literal> tag specifies the file modes
          (permissions) and the <literal>FILEMTIMES</literal> tag holds the last
          modification time for each file.
        </para>
        <para>
          The <literal>BASENAMES</literal> tag holds an array of the base file names for
          the files in the payload. The <literal>DIRNAMES</literal> tag holds an array of
          the directories for the files. The <literal>DIRINDEXES</literal> tag contains an
          index into the <literal>DIRNAMES</literal> for the directory. Each RPM must have
          either <literal>OLDFILENAMES</literal> or the triple of <literal>BASENAMES</literal>,
	  <literal>DIRNAMES</literal>, and <literal>DIRINDEXES</literal>, but not both.
        </para>
        <para>
          When listing file information, use the square bracket array
          syntax with your query formats. You can use the perms special
          formatting option for the file modes. For example:
        </para>
        <screen>
$ rpm -q --qf "[%-15{=NAME} %-36{FILENAMES} %{FILEMODES:perms}\n]" sudo
sudo            /etc/pam.d/sudo                      -rw-r--r--
sudo            /etc/pam.d/sudo-i                    -rw-r--r--
sudo            /etc/sudoers                         -r--r-----
sudo            /etc/sudoers.d                       drwxr-x---
sudo            /usr/bin/sudo                        ---s--x--x
sudo            /usr/bin/sudoedit                    ---s--x--x
sudo            /usr/bin/sudoreplay                  ---x--x--x
sudo            /usr/libexec/sesh                    -rwxr-xr-x
sudo            /usr/libexec/sudo_noexec.so          -rwxr-xr-x
sudo            /usr/sbin/visudo                     -rwxr-xr-x
sudo            /usr/share/doc/sudo-1.7.4p4          drwxr-xr-x
sudo            /usr/share/doc/sudo-1.7.4p4/ChangeLog -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/HISTORY  -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/LICENSE  -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/NEWS     -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/README   -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/README.LDAP -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/TROUBLESHOOTING -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/UPGRADE  -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/sample.pam -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/sample.sudoers -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/sample.syslog.conf -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/schema.ActiveDirectory -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/schema.OpenLDAP -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/schema.iPlanet -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/sudoers.ldap.pod -rw-r--r--
sudo            /usr/share/doc/sudo-1.7.4p4/sudoers2ldif -rw-r--r--
sudo            /usr/share/man/man5/sudoers.5.gz     -rw-r--r--
sudo            /usr/share/man/man5/sudoers.ldap.5.gz -rw-r--r--
sudo            /usr/share/man/man8/sudo.8.gz        -rw-r--r--
sudo            /usr/share/man/man8/sudoedit.8.gz    -rw-r--r--
sudo            /usr/share/man/man8/sudoreplay.8.gz  -rw-r--r--
sudo            /usr/share/man/man8/visudo.8.gz      -rw-r--r--
sudo            /var/db/sudo                         drwx------
        </screen>
      </section>
      <section id="RPM_Guide-Using_RPM_DB-Other_Query_Format_Tags">
        <title>Other Query Format Tags</title>
        <para>
          In addition to all these tags, there are a number of other
          miscellaneous tags, many of which are listed in Table 5-6.
        </para>
        <para>
          Table 5-6 Other query tags
        </para>
        <informaltable frame="all">
          <tgroup cols="2">
            <tbody>
              <row>
                <entry>
                  <para>
                    Tag
                  </para>
                </entry>
                <entry>
                  <para>
                    Holds
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    ARCHIVESIZE
                  </para>
                </entry>
                <entry>
                  <para>
                    Uncompressed size of the payload section
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    COOKIE
                  </para>
                </entry>
                <entry>
                  <para>
                    Holds an opaque string
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    RPMVERSION
                  </para>
                </entry>
                <entry>
                  <para>
                    Holds the version of the RPM tool used to create the
                    package
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    OPTFLAGS
                  </para>
                </entry>
                <entry>
                  <para>
                    Compiler optimization flags used to build the
                    package
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    PAYLOADFORMAT
                  </para>
                </entry>
                <entry>
                  <para>
                    Must be cpio for LSB-compliant packages
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    PAYLOADCOMPRESSOR
                  </para>
                </entry>
                <entry>
                  <para>
                    Must be gzip for LSB-compliant packages
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    PAYLOADFLAGS
                  </para>
                </entry>
                <entry>
                  <para>
                    Must be 9 for LSB-compliant packages
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    RHNPLATFORM
                  </para>
                </entry>
                <entry>
                  <para>
                    Holds an opaque string
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    FILEVERIFYFLAGS
                  </para>
                </entry>
                <entry>
                  <para>
                    Bitmask that specifies which tests to perform to
                    verify the files after an install
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
          For example, you can list the version of RPM that created a
          package with a command like the following:
        </para>
        <screen>
$ rpm -qp --qf "%{name} - rpm %{rpmversion}\n" *.rpm
qt - rpm 4.7.2
qt - rpm 4.7.2
qt-devel - rpm 4.7.2
qt-mysql - rpm 4.7.2
qt-sqlite - rpm 4.7.2
qt-sqlite - rpm 4.7.2
qt-x11 - rpm 4.7.2
qt-x11 - rpm 4.7.2        
	</screen>
        <note>
          <title>Cross Reference</title>
        <para>
          See <xref linkend="ch-package-structure"/>  for a listing of all the tags in an RPM file.
        </para>
	</note>
      </section>
    </section>
    <section>
      <title>Other queries</title>
      <para>
        If what you’ve seen so far isn’t enough, the rpm command
        supports a number of extra queries, mostly of use to developers.
      </para>
      <para>
        Table 5-7 summarizes these extra queries.
      </para>
      <para>
        Table 5-7 Extra Queries
      </para>
      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>
                <para>
                  Option
                </para>
              </entry>
              <entry>
                <para>
                  Meaning
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --dump
                </para>
              </entry>
              <entry>
                <para>
                  Dumps out extra information on files
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --fileid md5_id
                </para>
              </entry>
              <entry>
                <para>
                  Queries for the package with the given MD5 digest
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --hdrid sha1_header_id
                </para>
              </entry>
              <entry>
                <para>
                  Queries for the package with the given header
                  identifier number, in SHA1 format
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --last
                </para>
              </entry>
              <entry>
                <para>
                  Reorders the output of the rpm command to show the
                  most recently-installed packages first
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --pkgid md5_id
                </para>
              </entry>
              <entry>
                <para>
                  Queries for the package with the given MD5 package ID
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --querybynumber number
                </para>
              </entry>
              <entry>
                <para>
                  Queries for the given entry, by number, in the RPM
                  database
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --tid transaction_id
                </para>
              </entry>
              <entry>
                <para>
                  Queries for the package or packages with the given
                  transaction ID
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  <section id="RPM_Guide-Using_RPM_DB-Getting_information_on_package_files">
    <title>Getting Information on Package Files</title>
    <para>
      In addition to querying the RPM database about installed packages,
      the rpm command provides the handy ability to extract information
      from RPM files. This is very useful for determining whether you
      want to install a given package or not. It also helps with the
      simple task of figuring out what a package’s purpose, especially
      if names like kudzu, anaconda, or dia don’t immediately tell you
      what the corresponding packages provide.
    </para>
    <para>
      The <literal>–p</literal> option tells the rpm command to provide information on
      the given package file. The basic syntax is:
    </para>
    <para>
      <command>rpm –qp <replaceable>query_options</replaceable> <replaceable>filename</replaceable></command>
    </para>
    <para>
      You can use the longer option, <literal>--package</literal>, in place of <literal>–p</literal>. You
      can also pass more than one RPM file to the command.
    </para>
    <para>
      The query information options shown previously for installed
      packages also work for RPM files. For example, to list the
      configuration files for a package, combine the <literal>-q</literal>, <literal>-p</literal>,
      and <literal>-c</literal> options with the name of a package file, as shown following:
    </para>
    <screen>
$ rpm -qpc qt-4.6.2-17.fc12.x86_64.rpm 
/etc/Trolltech.conf
    </screen>
    <para>
      To list all the files in an RPM package, combine the <literal>-q</literal>, 
      <literal>-p</literal>, and <literal>-l</literal> options (example output truncated):
    </para>
    <screen>
$ rpm -qpl qt-4.6.2-17.fc12.x86_64.rpm
/etc/Trolltech.conf
/usr/bin/qdbus
/usr/lib64/libQtCore.so.4
/usr/lib64/libQtCore.so.4.6
/usr/lib64/libQtCore.so.4.6.2
/usr/lib64/libQtDBus.so.4
/usr/lib64/libQtDBus.so.4.6
/usr/lib64/libQtDBus.so.4.6.2
/usr/lib64/libQtNetwork.so.4
/usr/lib64/libQtNetwork.so.4.6
   </screen>
    <section id="RPM_Guide_Using_RPM_DB-Querying_package_files_remotely">
      <title>Querying Package Files Remotely</title>
    <para>
      As shown in <xref linkend="ch-using-rpm"/> , you can access RPM package files over a
      network using FTP or HTTP connections. To query remote files, use
      the same rules as shown in <xref linkend="ch-using-rpm"/> , with the following syntax:
    </para>
    <para>
      <command>rpm -qp ftp://<replaceable>username</replaceable>:<replaceable>password</replaceable>@<replaceable>hostname</replaceable>:<replaceable>port</replaceable>/<replaceable>path/to/rpm/file</replaceable></command>
    </para>
    <para>
      <command>rpm -qp http://<replaceable>hostname</replaceable>:<replaceable>port</replaceable>/<replaceable>path/to/rpm/file</replaceable></command>
    </para>
    <para>
      If your system resides behind a firewall with a proxy server, use
      the options in the following table to name the proxy. Note that
      these proxy options only work with the TIS Firewall toolkit.
    </para>
    <informaltable frame="all">
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>
              <para>
                Network Proxy Option
              </para>
            </entry>
            <entry>
              <para>
                Meaning
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                --ftpproxy proxy_hostname
              </para>
            </entry>
            <entry>
              <para>
                Names the proxy system
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                --ftpport proxy_port_number
              </para>
            </entry>
            <entry>
              <para>
                Network port number on the proxy system
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                --httpproxy proxy_hostname
              </para>
            </entry>
            <entry>
              <para>
                Names the proxy system
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                --httpport proxy_port_number
              </para>
            </entry>
            <entry>
              <para>
                Network port number on the proxy system
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para/>
  </section>
  <section id="RPM-Guide-Using_RPM-DB-verifying_packages">
    <title>Verifying Installed RPM Packages</title>
    <para>
      You can do a lot more than just query packages in the RPM
      database. You can ask the rpm command to verify packages with the
      <option>-V</option> (or <option>--verify</option>) option.
      The rpm -V command will also report missing dependencies.
    </para>
    <para>
      The basic syntax is:
    </para>
    <para>
      <command>rpm -V <replaceable>verify_options</replaceable> <replaceable>package_name</replaceable></command>
    </para>
    <para>
      For example:
    </para>
    <screen>
      rpm -V telnet
      #
    </screen>
    <para>
      If everything checks out, you'll get no response. The rpm command
      reports problems only. For example, if you have an installation of
      the telnet-server package that is missing some files, the rpm -V
      command will let you know, as shown following:
    </para>
    <screen>
      $ rpm -V telnet-server
      missing c /etc/xinetd.d/telnet
      missing /usr/sbin/in.telnetd
      missing d /usr/share/man/man5/issue.net.5.gz
    </screen>
    <para>
      In this example, the c and d stand for configuration and
      documentation files, respectively.
    </para>
    <para>
      Note
    </para>
    <section id="RPM_Guide-Using_RPM_DB-verifying_system">
      <title>Verifying your entire system</title>
      <para>
        To verify your entire system, use the <option>-a</option> option.
      </para>
      <para>
        For example:
      </para>
      <screen>
        # rpm -Va
        SM5....T c /usr/share/info/dir
        .......T c /etc/krb5.conf
        .......T /usr/share/pixmaps/gnome-default-dlg.png
        .......T /usr/share/pixmaps/gnome-error.png
        .......T /usr/share/pixmaps/gnome-info.png
        .......T /usr/share/pixmaps/gnome-question.png
        .......T /usr/share/pixmaps/gnome-warning.png
        S.5....T c /etc/sysconfig/pcmcia
        .....U.. /dev/winradio0
      </screen>
      <para>
        Each line that the rpm command outputs indicates a problem with
        the given file. The rpm command uses letter codes to show the
        type of the problem. Table 5-8 lists the letter codes with their
        meanings.
      </para>
      <para>
        Table 5-8 RPM verify output codes
      </para>
      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>
                <para>
                  Code
                </para>
              </entry>
              <entry>
                <para>
                  Meaning
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  S
                </para>
              </entry>
              <entry>
                <para>
                  File size differs.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  M
                </para>
              </entry>
              <entry>
                <para>
                  File mode differs.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  5
                </para>
              </entry>
              <entry>
                <para>
                  The MD5 checksum differs.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  D
                </para>
              </entry>
              <entry>
                <para>
                  The major and minor version numbers differ on a device
                  file.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  L
                </para>
              </entry>
              <entry>
                <para>
                  A mismatch occurs in a link.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  U
                </para>
              </entry>
              <entry>
                <para>
                  The file ownership differs.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  G
                </para>
              </entry>
              <entry>
                <para>
                  The file group owner differs.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  T
                </para>
              </entry>
              <entry>
                <para>
                  The file time (mtime) differs.
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-controlling_verification">
      <title>Controlling the verification</title>
      <para>
        You can use a number of options to tell the verification command
        specifically what to check for or not check for. Table 5-9 lists
        these options.
      </para>
      <para>
        Table 5-9 Controlling the verification
      </para>
      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>
                <para>
                  Option
                </para>
              </entry>
              <entry>
                <para>
                  Usage
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nodeps
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify dependencies.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nodigest
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify the package or header digests.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nofiles
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify the file attributes.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --noscripts
                </para>
              </entry>
              <entry>
                <para>
                  Don't try to verify the scripts.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nosignature
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify the package or header signatures.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nolinkto
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify the link file attribute.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nomd5
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify the MD5 digest file attribute.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nosize
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify the file size attribute.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nouser
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify the file owner attribute.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nogroup
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify the file group owner attribute.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nomtime
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify the file mtime attribute.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nomode
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify the file mode attribute.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  --nordev
                </para>
              </entry>
              <entry>
                <para>
                  Don't verify the file rdev attribute.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  -a
                </para>
              </entry>
              <entry>
                <para>
                  Verify all packages in a given group.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  -g group
                </para>
              </entry>
              <entry>
                <para>
                  Verify all packages in a given group.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  -p file
                </para>
              </entry>
              <entry>
                <para>
                  Verify the given RPM file.
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The <option>--nofiles</option> option is often used with <option> –Va</option> to
        verify the whole system but skip tests of file attributes. This
        command is used so often it has become an idiom for RPM usage,
        especially for debugging RPM problems. Run a command like the
        following:
      </para>
      <para>
        <command>rpm -Va --nofiles</command>
      </para>
    </section>
  </section>
  <section id="RPM_GUide-Using_RPM_DB-working_with_RPM_db">
    <title>Working With the RPM Database</title>
    <para>
      As mentioned in <xref linkend="ch-rpm-overview"/> , the RPM database is stored in
      /var/lib/rpm. The files in that directory are Berkeley DB files,
      as shown by the file command:
    </para>
    <screen>
      # file /var/lib/rpm/*
      /var/lib/rpm/Basenames: Berkeley DB (Hash, version 7, native byte-order)
      /var/lib/rpm/Conflictname: Berkeley DB (Hash, version 7, native byte-order)
      /var/lib/rpm/__db.001: data
      /var/lib/rpm/__db.002: X11 SNF font data, LSB first
      /var/lib/rpm/__db.003: X11 SNF font data, LSB first
      /var/lib/rpm/Dirnames: Berkeley DB (Btree, version 8, native byte-order)
      /var/lib/rpm/Filemd5s: Berkeley DB (Btree, version 8, native byte-order)
      /var/lib/rpm/Group: Berkeley DB (Hash, version 7, native byte-order)
      /var/lib/rpm/Installtid: Berkeley DB (Btree, version 8, native byte-order)
      /var/lib/rpm/Name: Berkeley DB (Hash, version 7, native byte-order)
      /var/lib/rpm/Packages: Berkeley DB (Hash, version 7, native byte-order)
      /var/lib/rpm/Providename: Berkeley DB (Hash, version 7, native byte-order)
      /var/lib/rpm/Provideversion: Berkeley DB (Btree, version 8, native byte-order)
      /var/lib/rpm/Requirename: Berkeley DB (Hash, version 7, native byte-order)
      /var/lib/rpm/Requireversion: Berkeley DB (Btree, version 8, native byte-order)
      /var/lib/rpm/Sha1header: Berkeley DB (Btree, version 8, native byte-order)
      /var/lib/rpm/Sigmd5: Berkeley DB (Btree, version 8, native byte-order)
      /var/lib/rpm/Triggername: Berkeley DB (Hash, version 7, native byte-order)
    </screen>
    <para>
      Each file is a separate database in Berkeley DB format, except for
      a few __db data files. (These are not really X11 font files, just
      plain data files. The file command is confused by the data in the
      files.)
    </para>
    <note>
      <title>The Berkeley DB Library</title>
    <para>
      Available from Oracle at http://www.oracle.com/technetwork/database/berkeleydb/overview/, the
      Berkeley DB library provides a simple database API. This is not a
      traditional relational database. Instead, data values are stored
      in what amounts to a persistent hash table of name/value pairs.
      This type of database is very quick to look up a named entry (such
      as a package name) but is not so quick for iterating over all the
      entries.
    </para>
    </note>
    <para>
      The RPM database is really a number of Berkeley DB databases, each
      designed for a different type of query.
    </para>
    <para>
      If something goes wrong with your RPM database, you can first try
      to rebuild it. If that fails, you may need to initialize a new
      database, although that is generally not needed. First and
      foremost, however, you should back up this database.
    </para>
    <section id="RPM_Guide-Using_RPM_DB-Backing_up_RPM_db">
      <title>Backing up the RPM database</title>
      <para>
        As mentioned before, the RPM database resides in the
        /var/lib/rpm. You can back up the RPM database by using a command
        such as the following:
      </para>
      <para>
        <command>tar cf <replaceable>rpmdb.tar</replaceable> /var/lib/rpm</command>
      </para>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-rebuilding_RPM-db">
      <title>Rebuilding the RPM database</title>
      <para>
        If the RPM database has been corrupted in some way, you can use
        the <option>--rebuilddb</option> option to tell the rpm command to rebuild your
        database. For example:
      </para>
      <para>
        <command>rpm --rebuilddb</command>
      </para>
      <para>
        This command rebuilds the RPM database from the installed
        packages, the file named <filename>Packages</filename> in the /var/lib/rpm directory.
        Only the <filename>Packages</filename> file is required. All the other files can be
        recreated from the <filename>Packages</filename> file. If your database is OK, this
        command won't do much, other than shrink the size of your RPM
        database by removing unused entries. This command will take some
        time to execute, though.
      </para>
      <warning>
      <para>
        Before running this command, back up your RPM database.
      </para>
      </warning>
      <para>
        To check that the <command>rpm --rebuilddb</command> command has not damaged the
        RPM database, you can check with a file listing, query all
        packages, and then check the results of the <command>rpm –rebuilddb</command>
        command with another file listing when done.
      </para>
    </section>
    <section id="RPM_Guide-Using_RPM_DB-new_db">
      <title>Creating a new RPM database</title>
      <para>
        If all else fails, use the <option>--initdb</option> option to tell the rpm
        command to create a new empty RPM database. In almost all cases,
        you do not want to create a new RPM database, since this
        database will be empty. It will not have any knowledge about the
        packages you have already installed on your system. That could
        lead to a lot of problems, since you have the files installed,
        but the RPM system just doesn’t know about them.
      </para>
      <para>
        The basic syntax follows.
      </para>
      <para>
        <command>rpm --initdb</command>
      </para>
      <para>
        If the RPM system cannot be rebuilt, you may have to reinstall
        the operating system to recreate a clean system. In general, if
        things are this far gone, reinstalling may be your best answer
        instead of wiping the RPM database and creating an empty
        database.
      </para>
      <para>
        You can also use the <option>--dbpath</option> option to tell the rpm command to
        create an RPM database in a different directory.
      </para>
      <para>
        For example:
      </para>
      <screen>
	mkdir /tmp/rpm
        rpm --initdb --dbpath /tmp/rpm
      </screen>
      <para>
        These commands create a temporary directory and an RPM database
        in the /tmp/rpm directory.
      </para>
      <para>
        After running this command, you can examine the files created.
      </para>
    </section>
  </section>
  <section id="RPM_Guide-Using_RPM_DB-summary">
    <title>Summary</title>
    <para>
      This chapter covers the rpm command options to query the RPM
      database and RPM package files. You can determine the packages
      installed on your system, as well as which packages are
      responsible for the files on your system.
    </para>
    <para>
      The RPM database maintains a lot of information about the files
      and packages on your system. Thus, it is crucial for managing your
      Linux systems. You should back up the RPM database before and
      after any installation, upgrade, or removal of packages.
    </para>
    <para>
      You can also use the <option>--rebuilddb</option> option to the rpm command to
      rebuild a damaged RPM database.
    </para>
  </section>
</section>
</chapter>

<!--
Local variables:
mode: xml
sgml-parent-document:("rpm-guide.xml" "book" "chapter")
fill-column: 72
End:
-->
