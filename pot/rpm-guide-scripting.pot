msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2016-03-21 21:56+0800\n"
"PO-Revision-Date: 2016-03-21 21:56+0800\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"Language: en-US \n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Publican v4.3.2\n"

msgid "Automating RPM with Scripts"
msgstr ""

msgid "This chapter covers:"
msgstr ""

msgid "Deciding when to program and when to script"
msgstr ""

msgid "Examining RPM files with scripts"
msgstr ""

msgid "Querying the RPM database with scripts"
msgstr ""

msgid "The rpm command provides a very high-level view of package management. Most of the operations you need to perform require only a single invocation. Some of the command-line options to the rpm command tend to get very complex, however, especially for detailed queries. That’s where scripting can help."
msgstr ""

msgid "This chapter covers scripting, specifically shell scripting, with the rpm command, especially for newcomers to Linux scripting"
msgstr ""

msgid "Scripting"
msgstr ""

msgid "Scripting allows you to quickly write new commands in a language, called a scripting language, that can help automate your work. Used heavily by system administrators and lightly by software developers, scripts can help remove some of the tedium from your day-to-day tasks. Scripts can also hold the complex query formats used with the rpm command so you don’t have to remember them."
msgstr ""

msgid "Scripts start out as text files. These text files hold commands in the scripting language. Most of these script file commands run commands installed on your system, such as rpm. To run a script, invoke a command, called an interpreter, that reads in the script file and executes the commands inside the script."
msgstr ""

msgid "Programming is usually considered different from scripting, even though there are many similarities. Programs start out as text files. These text files hold commands in the programming language and sometimes, not often, calls to commands installed on your system. Programs generally involve more work than scripts and are generally larger, containing more commands."
msgstr ""

msgid "Furthermore, most programs need to be compiled. A separate command parses the program text files and generates some form of machine code. Multiple pieces of a program may be linked together to form a command you can call from your shell prompt."
msgstr ""

msgid "Some programming languages, such as Java or C#, are compiled to a generic bytecode format. A compiled Java program, for example, is the same no matter what the architecture. To run such a program, you need a runtime engine such as the java command provides. (Runtime engine is a fancy term for interpreter.)"
msgstr ""

msgid "Such differences between scripting and programming sometimes get in the way of performing real work. For example, I once worked with a group of people who were convinced that they were not programmers. They felt that programming was an art that was far beyond them. Yet, they wrote hundreds of kilobytes of scripts to create a sophisticated graphical interface for a Computer-Aided Design system. In my mind, they were programming (and doing quite well at it). In their minds, though, there was a clear distinction between scripting@mdwhat they could do@mdand programming, which was beyond them, they thought."
msgstr ""

msgid "Don’t get caught up in this. Use the right tool for the job."
msgstr ""

msgid "Distinguishing Scripting Languages from Programming Languages"
msgstr ""

msgid "Experts differ regarding what defines a scripting language and what defines a programming language. It’s clear that languages such as Python blur the old distinction between programming and scripting."
msgstr ""

msgid "Originally, scripting was writing small files of commands that invoked other system commands. For example, you could write a script that wraps the Linux file command. Scripts were executed by scripting-language interpreters that parsed each command one at a time and then executed the command."
msgstr ""

msgid "Modern scripting languages, such as Tcl, are parsed at runtime and compiled into an internal bytecode format. Once compiled, there is no real difference from a language associated with programming such as Java."
msgstr ""

msgid "With a scripting language"
msgstr ""

msgid "*You generally don’t have to compile the script in advance. The scripting language interpreter may compile the program, often to an internal byte code, but you don’t have to invoke a compiler as a separate step."
msgstr ""

msgid "*The facilities of the language generally provide a higher level and more abstract level of interaction with the system than with programming languages. For example, writing socket-based networking code in Tcl requires a lot less code than writing the same code in a programming language such as C. Tcl provides a more abstract view of networking; therefore, your code is a lot simpler."
msgstr ""

msgid "*The commands in the scripting language are mostly the commands available to you on the command line. Scripting languages introduce their own commands, too."
msgstr ""

msgid "*The language is generally identified as a scripting language. This is more consensus than anything else. Forth is considered an interpreted programming language, while Perl is considered a scripting language."
msgstr ""

msgid "Table 15-1 lists some of the more common scripting and programming languages. Note that these are the generally-accepted categories for these languages, not hard and fast rules. This should not stop you, for example, from writing programs in Perl or Python. The distinctions between programming and scripting have blurred in recent years."
msgstr ""

msgid "Table 15-1 Common Scripting Languages and Common Programming Languages"
msgstr ""

msgid "Scripting Languages"
msgstr ""

msgid "Programming Languages"
msgstr ""

msgid "Bash (Bourne Again shell) Csh (C shell) JavaScript Ksh (Korn shell) Lua MS-DOS batch files Perl Python Ruby Sh (Bourne shell) Tcl"
msgstr ""

msgid "Assembler BASIC C C++ C# FORTRAN Forth Java LISP Modula-2, Modula-3 Oberon Pascal"
msgstr ""

msgid "Deciding When to Program and When to Script"
msgstr ""

msgid "Just as the distinction between programming and scripting languages has blurred in the last few years, so have the guidelines for when you should program and when you should script. The simplest rule remains, though: Use whatever techniques make you productive. In the end, no one really cares if you call it a program or a script."
msgstr ""

msgid "Even so, these guidelines may help:"
msgstr ""

msgid "*If you have to perform a lot of operations on a lot of RPMs, a program will likely perform much faster than a script that calls the rpm command over and over."
msgstr ""

msgid "*If the task is relatively simple, scripting generally works best."
msgstr ""

msgid "*If you are more experienced with a particular language, use it."
msgstr ""

msgid "*If you need to perform complex operations, perhaps involving transactions, a program is probably the right way to go."
msgstr ""

msgid "*In many cases, programming languages work better for creating graphical user interfaces, although Python and Perl offer graphical user interface toolkits, such as Perl/Tk or PyQt."
msgstr ""

msgid "There isn’t one right way to do it. Pick what works best for you."
msgstr ""

msgid "Cross Reference"
msgstr ""

msgid "This chapter covers shell scripting. <xref linkend=\"ch-programming-c\" /> covers C programming. <xref linkend=\"ch-rpm-programming-python\" /> covers Python scripting and programming, and <xref linkend=\"ch-programming-perl\" /> covers Perl scripting."
msgstr ""

msgid "Shell Scripting Basics"
msgstr ""

msgid "For newcomers to scripting, don’t worry. A script, in this case a shell script, is merely a text file with commands mostly the same as the commands you can type at the keyboard. I’ll point out the differences."
msgstr ""

msgid "The following sections quickly introduce scripting for those new to this venture."
msgstr ""

msgid "Writing a script"
msgstr ""

msgid "For your first venture, enter the following script into a text file:"
msgstr ""

msgid "rpm -qa | grep rpm"
msgstr ""

msgid "This script has a two-part command. The rpm –qa part queries all RPM packages, as covered in <xref linkend=\"ch-using-rpm\" /> . The grep rpm part finds only packages with rpm in their names. This is a very simple script, but it can serve to show how to work with scripts."
msgstr ""

msgid "Save this file under the name listrpmpkgs, since this script lists RPM packages."
msgstr ""

msgid "Note"
msgstr ""

msgid "If you’re new to Linux, you’ll notice there’s no program named Notepad.exe. There are, though, a plethora of Linux text editors to choose from. See <xref linkend=\"ch-development-tools\" /> for a listing of Linux text-editing tools."
msgstr ""

msgid "Running a script"
msgstr ""

msgid "Once you’ve entered a script, you can run it with the sh command, as shown following, passing the name of your script to the sh command:"
msgstr ""

msgid "$ sh listrpmpkgs"
msgstr ""

msgid "librpm404-devel-4.0.4-8x.27"
msgstr ""

msgid "librpm404-4.0.4-8x.27"
msgstr ""

msgid "rpm404-python-4.0.4-8x.27"
msgstr ""

msgid "rpm-4.1-1.06"
msgstr ""

msgid "rpm-devel-4.1-1.06"
msgstr ""

msgid "gnorpm-0.9-1"
msgstr ""

msgid "rpm-python-4.1-1.06"
msgstr ""

msgid "redhat-rpm-config-8.0-1"
msgstr ""

msgid "rpm-build-4.1-1.06"
msgstr ""

msgid "rpmrebuild-1.0-0"
msgstr ""

msgid "Type the command you have placed in your script at the command line. There should be no difference in the output. For example:"
msgstr ""

msgid "$ rpm -qa | grep rpm"
msgstr ""

msgid "Problems running scripts"
msgstr ""

msgid "The previous script example required the sh program, a Linux shell, to run the script. You also had to have the script file, such as listrpmpkgs, available. So, if you have stored the file in /home2/bin, to run the script, use the following command:"
msgstr ""

msgid "$ sh /home2/bin/listrpmpkgs"
msgstr ""

msgid "That’s not very convenient. Furthermore, you always have to remember where you stored the script file listrpmpkgs. To make this command work better, you can turn your script into a command."
msgstr ""

msgid "Turning a script into a command"
msgstr ""

msgid "To turn a script into a command, do three simple things:"
msgstr ""

msgid "1.Add a special magic comment to the start of the file so Linux recognizes your text file as a command script."
msgstr ""

msgid "2.Change the permissions on the file so that it is marked as executable."
msgstr ""

msgid "3.Copy the file to a directory located in your command path."
msgstr ""

msgid "Shell scripts use a # to indicate a comment, text intended for human readers that can help explain the purpose of the script. By convention, Linux shells use a #! comment in the first line of a script file as a special marker that indicates the file is a shell script. The text that comes after the #! holds the name of the command that should be used to run the script. In almost all cases, that command should be /bin/sh for a shell script."
msgstr ""

msgid "So edit the listrpmpkgs script again, and add the magic comment so that the file reads as follows:"
msgstr ""

msgid "#!/bin/sh"
msgstr ""

msgid "Make sure the #! comment starts at the beginning of the first line."
msgstr ""

msgid "Next, change the permissions on the script to mark it as an executable program. Use the chmod command to do this. The chmod command changes the file permissions. To see the permissions, run the ls –l command before changing the permissions:"
msgstr ""

msgid "$ ls -l listrpmpkgs"
msgstr ""

msgid "-rw-rw-r-- 1 ericfj ericfj 31 Nov 7 20:02 listrpmpkgs"
msgstr ""

msgid "The first set of characters, the -rw-rw-r--, indicate the permissions in three batches: permissions for the file owner, the owner’s group of users, and world (everyone else). The rw means read and write, and the r alone means read only for everyone not the owner and not in the owner’s group."
msgstr ""

msgid "To add the permission to execute the file for the file owner only, use the following command:"
msgstr ""

msgid "$ chmod u+x listrpmpkgs"
msgstr ""

msgid "In this command, the u stands for the user who owns the file (for historical reasons, an o stands for others, not owner). The +x means add the x permission, short for execute permission."
msgstr ""

msgid "After running this command, you can see the revised permissions."
msgstr ""

msgid "-rwxrw-r-- 1 ericfj ericfj 31 Nov 7 20:02 listrpmpkgs"
msgstr ""

msgid "Use the man chmod command to see more information on this command."
msgstr ""

msgid "You now have a command you can run locally. For example:"
msgstr ""

msgid "$ ./listrpmpkgs"
msgstr ""

msgid "The next step is to copy the file to a directory in your system command path. To see which directories are in your path, run the following command:"
msgstr ""

msgid "$ echo $PATH"
msgstr ""

msgid "/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/ericfj/bin:/usr/java/j2sdk1.4.0_01/bin"
msgstr ""

msgid "Pick one of these directories. The /usr/local/bin directory is a common place to share locally created commands. If this is a personal command for your own use only, a directory under your home directory will be better. In this example, the /home/ericfj/bin is one such directory."
msgstr ""

msgid "Copy the script file to a directory in your command path, and you are ready to go."
msgstr ""

msgid "If you use the C shell, csh, or the T C shell, tcsh, you need to run the rehash command to tell the shell to look again at the set of commands available in your command path."
msgstr ""

msgid "Enter the following command:"
msgstr ""

msgid "$ listrpmpkgs"
msgstr ""

msgid "You have now extended the Linux command set with your own command."
msgstr ""

msgid "Windows users may be used to the convention that program file names end in .exe and scripts end in .bat or .cmd. When you run these programs or scripts, you don’t include the extension, exe, .bat, or .cmd. With Linux and UNIX, though, the full file name is important, so if you name your script rpminfo.bat, you must type rpminfo.bat each time you run the script. That’s why most Linux programs and scripts have no filename extension."
msgstr ""

msgid "If you want to share your script with others, you should give them the right to execute it as well. You can do that with the following command:"
msgstr ""

msgid "$ chmod a+x listrpmpkgs"
msgstr ""

msgid "In this case, the a stands for all users."
msgstr ""

msgid "Passing command-line options to your script"
msgstr ""

msgid "The listrpmpkgs script used so far isn’t very useful. It performs one command and that’s it. We cannot customize it without writing a new script."
msgstr ""

msgid "One way to make a script more flexible is to allow it to use command-line options. Just like the rpm command accepts a zillion options, you can make your scripts accept options."
msgstr ""

msgid "Shells define special variables for the command-line options passed to the shell. Table 15-2 lists these options."
msgstr ""

msgid "Table 15-2: Shell variables for command-line options"
msgstr ""

msgid "Variable"
msgstr ""

msgid "Holds"
msgstr ""

msgid "$0"
msgstr ""

msgid "The name of the script itself, from the command line"
msgstr ""

msgid "$1"
msgstr ""

msgid "The first option"
msgstr ""

msgid "$2"
msgstr ""

msgid "The second option"
msgstr ""

msgid "$3"
msgstr ""

msgid "The third option"
msgstr ""

msgid "$4"
msgstr ""

msgid "The fourth option"
msgstr ""

msgid "$5"
msgstr ""

msgid "The fifth option"
msgstr ""

msgid "$6"
msgstr ""

msgid "The sixth option"
msgstr ""

msgid "$7"
msgstr ""

msgid "The seventh option"
msgstr ""

msgid "$8"
msgstr ""

msgid "The eighth option"
msgstr ""

msgid "$9"
msgstr ""

msgid "The ninth option"
msgstr ""

msgid "$*"
msgstr ""

msgid "All command-line options"
msgstr ""

msgid "$#"
msgstr ""

msgid "Holds the number of command-line options"
msgstr ""

msgid "Use $#argv in place of $# if you use the C shell to run your scripts."
msgstr ""

msgid "You can use these variables to allow the user to pass the text to search for, instead of always searching for rpm. With this addition, your new script, renamed rpmgrep, follows in Listing 15-1:"
msgstr ""

msgid "Listing 15-1: rpmgrep"
msgstr ""

msgid "rpm -qa | grep $*"
msgstr ""

msgid "This script now expects a command-line option that holds the text to search for. Mark this script as an executable; then you can run it as follows:"
msgstr ""

msgid "$ ./rpmgrep python"
msgstr ""

msgid "python-devel-2.2.1-17"
msgstr ""

msgid "gnome-python2-gtkhtml2-1.99.11-8"
msgstr ""

msgid "gnome-python2-canvas-1.99.11-8"
msgstr ""

msgid "gnome-python2-1.99.11-8"
msgstr ""

msgid "orbit-python-1.99.0-4"
msgstr ""

msgid "gnome-python2-bonobo-1.99.11-8"
msgstr ""

msgid "gnome-python2-gconf-1.99.11-8"
msgstr ""

msgid "libxslt-python-1.0.19-1"
msgstr ""

msgid "libxml2-python-2.4.23-1"
msgstr ""

msgid "python-optik-1.3-2"
msgstr ""

msgid "python-2.2.1-17"
msgstr ""

msgid "mod_python-3.0.0-10"
msgstr ""

msgid "python-tools-2.2.1-17"
msgstr ""

msgid "If you want to make this command available, copy it to a directory in your command path as described in the preceding section."
msgstr ""

msgid "Examining RPM Files"
msgstr ""

msgid "When you work with a lot of RPM files, you’ll find that you run the same commands over and over again for each new package you get. For example, you may want to see what capabilities a package requires. You can type in the rpm command each time, or write a short shell script with the necessary command-line options. Listing 15-2 shows this script."
msgstr ""

msgid "Listing 15-2: rpmdepend"
msgstr ""

msgid "rpm -qp --requires $*"
msgstr ""

msgid "This script expects the name of an RPM package file. Run the command as follows:"
msgstr ""

msgid "$ rpmdepend vim-common-6.1-14.i386.rpm"
msgstr ""

msgid "rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1"
msgstr ""

msgid "rpmlib(CompressedFileNames) &lt;= 3.0.4-1"
msgstr ""

msgid "/bin/sh"
msgstr ""

msgid "/usr/bin/awk"
msgstr ""

msgid "libc.so.6"
msgstr ""

msgid "libc.so.6(GLIBC_2.0)"
msgstr ""

msgid "libc.so.6(GLIBC_2.1)"
msgstr ""

msgid "Another common task I perform involves listing all the files in an RPM along with the descriptive information on the package. This can really help, since so many Linux packages have nondescriptive names such as dia and anaconda."
msgstr ""

msgid "Listing 15-3 shows the rpminfo script."
msgstr ""

msgid "Listing 15-3: rpminfo"
msgstr ""

msgid "rpm -qilp $* | less"
msgstr ""

msgid "This script lists a potentially long set of lines, so the script pipes the output to the less command. For example:"
msgstr ""

msgid "$ ./rpminfo perl-XML-Dumper-0.4-22.noarch.rpm"
msgstr ""

msgid "Name : perl-XML-Dumper Relocations: /usr"
msgstr ""

msgid "Version : 0.4 Vendor: Red Hat, Inc."
msgstr ""

msgid "Release : 22 Build Date: Tue 06 Aug 2002 01:53:30 PM CDT"
msgstr ""

msgid "Install date: (not installed) Build Host: vegeta.devel.redhat.com"
msgstr ""

msgid "Group : System Environment/Libraries Source RPM: perl-XML-Dumper-0.4-22.src.rpm"
msgstr ""

msgid "Size : 10015 License: GPL"
msgstr ""

msgid "Signature : DSA/SHA1, Tue 06 Aug 2002 02:11:39 PM CDT, Key ID fd372689897da07a"
msgstr ""

msgid "Packager : Red Hat, Inc. &lt;http://bugzilla.redhat.com/bugzilla&gt;"
msgstr ""

msgid "URL : http://www.cpan.org"
msgstr ""

msgid "Summary : Perl module for dumping Perl objects from/to XML"
msgstr ""

msgid "Description :"
msgstr ""

msgid "XML::Dumper dumps Perl data to XML format. XML::Dumper can also read"
msgstr ""

msgid "XML data that was previously dumped by the module and convert it back"
msgstr ""

msgid "to Perl. Perl objects are blessed back to their original packaging;"
msgstr ""

msgid "if the modules are installed on the system where the perl objects are"
msgstr ""

msgid "reconstituted from xml, they will behave as expected. Intuitively, if"
msgstr ""

msgid "the perl objects are converted and reconstituted in the same"
msgstr ""

msgid "environment, all should be well."
msgstr ""

msgid "/usr/lib/perl5/vendor_perl/5.8.0/XML/Dumper.pm"
msgstr ""

msgid "/usr/share/man/man3/XML::Dumper.3pm.gz"
msgstr ""

msgid "I use this script so that I know what files a package wants to install."
msgstr ""

msgid "Querying the RPM Database"
msgstr ""

msgid "In addition to querying RPM files, you can script the commands you use to query the RPM database. This is most useful for the long commands with query formats, especially if you have a hard time remembering all the formats."
msgstr ""

msgid "Querying for all packages installed at the same time"
msgstr ""

msgid "If you want to list all the packages that were installed with the same transaction ID as a particular package, for example, you can use a script like rpmtran, in Listing 15-4."
msgstr ""

msgid "Listing 15-4: rpmtran"
msgstr ""

msgid "tid=`rpm -q --qf \"%{INSTALLTID}\\n\" $*`"
msgstr ""

msgid "rpm -q --tid $tid"
msgstr ""

msgid "This script uses the query format to get the transaction ID, or tid, for a particular package. It then passes this transaction ID to the rpm command to query for all packages installed with the same transaction ID."
msgstr ""

msgid "For example:"
msgstr ""

msgid "$ ./rpmtran tcl"
msgstr ""

msgid "itcl-3.2-74"
msgstr ""

msgid "tclx-8.3-74"
msgstr ""

msgid "tcl-8.3.3-74"
msgstr ""

msgid "tix-8.2.0b1-74"
msgstr ""

msgid "tkinter-2.2.1-17"
msgstr ""

msgid "Reading HTML documentation for a package"
msgstr ""

msgid "You can combine the rpm command with other commands as well. For example, the rpm –qd command lists the documentation files with a package. If this documentation is in HTML format, you can display this documentation in a Web browser such as Mozilla. Furthermore, by convention, the starting page for HTML documentation should be a file named index.html. Listing 15-5 combines all these factors:"
msgstr ""

msgid "Listing 15-5: rpmmoz"
msgstr ""

msgid "html_file=`rpm -qd $* | grep index.html | head -n 1 `"
msgstr ""

msgid "echo \"Launching Web browser with $html_file\""
msgstr ""

msgid "htmlview $html_file &amp;"
msgstr ""

msgid "This script searches for the documentation for a given package name, finds the first file named index.html, and launches the Web browser in the background to display this file, using the htmlview command which will likely run mozilla or your configured Web browser. When you run this command, you should see output like the following; then the Web browser should appear:"
msgstr ""

msgid "$ ./rpmmoz rpm-devel"
msgstr ""

msgid "Launching Web browser with /usr/share/doc/rpm-devel-4.1/apidocs/html/index.html"
msgstr ""

msgid "This script does not check for errors. If there are no files named index.html, the script launches the Web browser anyway. You could fix this by changing the script to validate the html_file variable prior to launching the Web browser."
msgstr ""

msgid "Where to Go From Here"
msgstr ""

msgid "This chapter just introduces the basics for shell scripting. There are many more things you can do. The online manual pages for the bash or tcsh commands provide a wealth of reference information on these shells."
msgstr ""

msgid "A number of Web sites provide tutorials on bash, including http://pegasus.rutgers.edu/~elflord/unix/bash-tute.html and www.linuxorbit.com/modules.php?op=modload&amp;name=Sections&amp;file=index&amp;req=viewarticle&amp;artid=459. In addition, the Linux Documentation Project at www.tldp.org/guides.html provides a bash scripting guide, along with a number of bash- and shell-related how-to documents at www.tldp.org/HOWTO/HOWTO-INDEX/howtos.html."
msgstr ""

msgid "Teach Yourself Linux, by Steve Oualline and Eric Foster-Johnson (John Wiley &amp; Sons, 2000), introduces a number of Linux topics, including text editors and scripting, for those new to Linux. And Graphical Applications with Tcl and Tk (Hungry Minds, Inc., 1997) by Eric Foster-Johnson, covers another scripting language, Tcl/Tk."
msgstr ""

msgid "Use your imagination. Any command that you run often or that is hard to type can be scripted. Furthermore, you can write complex scripts that automate some of the more tedious tasks you need to perform."
msgstr ""

msgid "Summary"
msgstr ""

msgid "Scripting is the art of writing a set of commands into text files to speed up your work. Programming is the art of writing a set of commands into text files, compiling the text files, and getting paid more. Choosing when to program and when to script isn’t always a clear-cut decision, but generally programs are move involved and complex, while scripts are shorter tools that automate your work. This chapter provides just a glimpse of all you can do with scripts and the RPM system."
msgstr ""

msgid "Scripts work very well for capturing obscure syntax options for the rpm command, especially the query formats. You can figure out a command once and then save the command as a script to save time in the future."
msgstr ""

msgid "Scripts aren’t the best choice for all tasks, though. In many cases, you need to write a program to accomplish your goals. The next chapter delves into the RPM C programming API, rpmlib."
msgstr ""

